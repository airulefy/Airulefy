{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Airulefy","text":"<p>Unify your AI rules. One source of truth, synced across all major AI coding agents.</p> <p>Airulefy makes it easy to maintain a single set of rules in <code>.ai/</code> directory and automatically generate or link them to each tool-specific format (Cursor, Copilot, Cline, Devin, etc.). No more copy-pasting. No more inconsistent behavior.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Unified <code>.ai/</code> folder for all your project-wide AI rules (Markdown)</li> <li>Auto-generate:</li> <li><code>.cursor/rules/*.mdc</code></li> <li><code>.cline-rules</code></li> <li><code>.github/copilot-instructions.md</code></li> <li><code>devin-guidelines.md</code></li> <li>Symlink or copy mode (auto-detects OS capability)</li> <li>Optional YAML config: <code>.ai-rules.yml</code></li> <li>Works with CI and pre-commit hooks</li> </ul>"},{"location":"#why-airulefy","title":"Why Airulefy?","text":"<p>As AI-driven development tools become more prevalent, each tool receives instructions in its own format and location. This makes it difficult to maintain when using multiple tools, as you need to update the same instructions in multiple places.</p> <p>Airulefy solves this problem by automatically generating or linking files from a single source of truth to the format needed by each AI tool.</p>"},{"location":"cli_reference/","title":"CLI Reference","text":"<p>Airulefy can be operated through a command-line interface (CLI). This page describes all available commands and options.</p>"},{"location":"cli_reference/#basic-usage","title":"Basic Usage","text":"<pre><code>airulefy [options] [command]\n</code></pre>"},{"location":"cli_reference/#global-options","title":"Global Options","text":"Option Description <code>--version</code> Show version information and exit <code>--help</code> Show help message and exit"},{"location":"cli_reference/#commands","title":"Commands","text":""},{"location":"cli_reference/#generate","title":"generate","text":"<p>Generate AI rule files.</p> <pre><code>airulefy generate [options]\n</code></pre> <p>Options:</p> Option Description <code>--copy</code>, <code>-c</code> Force copy mode instead of symlink <code>--verbose</code>, <code>-v</code> Show detailed output <code>--help</code> Show help message <p>Examples:</p> <pre><code># Generate rules using the default mode (as defined in configuration)\nairulefy generate\n\n# Generate rules using copy mode\nairulefy generate --copy\n\n# Generate rules with detailed output\nairulefy generate --verbose\n</code></pre>"},{"location":"cli_reference/#watch","title":"watch","text":"<p>Watch the <code>.ai/</code> directory for changes and automatically regenerate rule files.</p> <pre><code>airulefy watch [options]\n</code></pre> <p>Options:</p> Option Description <code>--copy</code>, <code>-c</code> Force copy mode instead of symlink <code>--help</code> Show help message <p>Examples:</p> <pre><code># Watch for changes using default mode\nairulefy watch\n\n# Watch for changes using copy mode\nairulefy watch --copy\n</code></pre>"},{"location":"cli_reference/#validate","title":"validate","text":"<p>Validate the configuration and rule files.</p> <pre><code>airulefy validate\n</code></pre> <p>Options:</p> Option Description <code>--help</code> Show help message <p>Examples:</p> <pre><code>airulefy validate\n</code></pre>"},{"location":"cli_reference/#list-tools","title":"list-tools","text":"<p>List supported AI tools and their configurations.</p> <pre><code>airulefy list-tools\n</code></pre> <p>Options:</p> Option Description <code>--help</code> Show help message <p>Examples:</p> <pre><code>airulefy list-tools\n</code></pre>"},{"location":"cli_reference/#exit-codes","title":"Exit Codes","text":"Code Description 0 Success 1 Error/Failure"},{"location":"configuration/","title":"Configuration","text":"<p>You can customize Airulefy's behavior through the <code>.ai-rules.yml</code> configuration file.  This page describes all available configuration options and provides examples.</p>"},{"location":"configuration/#basic-configuration","title":"Basic Configuration","text":"<p>Create a file named <code>.ai-rules.yml</code> in your project's root directory. Here's a basic example:</p> <pre><code>default_mode: symlink\ninput_path: .ai\ntools:\n  cursor: {}\n  cline: {}\n  copilot: {}\n  devin: {}\n</code></pre>"},{"location":"configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"configuration/#global-settings","title":"Global Settings","text":"Option Description Default Value Valid Values <code>default_mode</code> Default synchronization mode <code>symlink</code> <code>symlink</code>, <code>copy</code> <code>input_path</code> Path to directory containing AI rule files <code>.ai</code> Any relative path"},{"location":"configuration/#tool-specific-settings","title":"Tool-Specific Settings","text":"<p>Each tool can have the following options:</p> Option Description Default Value Valid Values <code>mode</code> Synchronization mode for this tool Value of <code>default_mode</code> <code>symlink</code>, <code>copy</code> <code>output</code> Output file path Tool-specific Any relative path"},{"location":"configuration/#supported-tools-and-default-outputs","title":"Supported Tools and Default Outputs","text":"Tool Name Default Output Path <code>cursor</code> <code>.cursor/rules/core.mdc</code> <code>cline</code> <code>.cline-rules</code> <code>copilot</code> <code>.github/copilot-instructions.md</code> <code>devin</code> <code>devin-guidelines.md</code>"},{"location":"configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"configuration/#simple-configuration","title":"Simple Configuration","text":"<pre><code>default_mode: symlink\n</code></pre> <p>Use symlinks for all tools with default output paths.</p>"},{"location":"configuration/#custom-output-paths","title":"Custom Output Paths","text":"<pre><code>default_mode: symlink\ntools:\n  cursor:\n    output: \".cursor/rules/project-rules.mdc\"\n  devin:\n    output: \"docs/devin-instructions.md\"\n</code></pre> <p>Customize the output paths for Cursor and Devin.</p>"},{"location":"configuration/#mixed-modes","title":"Mixed Modes","text":"<pre><code>default_mode: symlink\ntools:\n  cursor: {}  # Use symlink\n  cline:\n    mode: copy  # Use copy\n  copilot:\n    mode: symlink  # Explicitly specify symlink\n  devin:\n    mode: copy  # Use copy\n    output: \"custom/path/devin-guide.md\"  # Custom output path\n</code></pre> <p>Specify different synchronization modes and output paths for each tool.</p>"},{"location":"configuration/#custom-input-path","title":"Custom Input Path","text":"<pre><code>default_mode: symlink\ninput_path: \"docs/ai-rules\"\n</code></pre> <p>Read AI rule files from <code>docs/ai-rules</code> directory instead of <code>.ai</code>.</p>"},{"location":"configuration/#notes","title":"Notes","text":"<ul> <li><code>symlink</code> mode may require administrator privileges on Windows</li> <li>In environments where symlinks are not supported, <code>copy</code> mode is automatically used</li> <li>Output directories are automatically created if the file doesn't exist</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to the Airulefy project! This guide explains how to set up your development environment, create pull requests, and follow coding conventions.</p>"},{"location":"contributing/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"contributing/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or higher</li> <li>Poetry (for package management)</li> <li>Git</li> </ul>"},{"location":"contributing/#setup-steps","title":"Setup Steps","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/airulefy/Airulefy.git\ncd Airulefy\n</code></pre> <ol> <li>Install dependencies with Poetry:</li> </ol> <pre><code># If you don't have Poetry installed yet\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Install dependencies\npoetry install\n</code></pre> <ol> <li>Install pre-commit hooks:</li> </ol> <pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"contributing/#using-devcontainer","title":"Using DevContainer","text":"<p>If you're using VS Code with extensions, you can easily set up a development environment with DevContainer:</p> <ol> <li>After cloning the repository, open it in VS Code:</li> </ol> <pre><code>git clone https://github.com/airulefy/Airulefy.git\ncode Airulefy\n</code></pre> <ol> <li>When VS Code detects the <code>.devcontainer</code> folder, select \"Reopen in Container\".</li> </ol> <p>See the DevContainer documentation for more details.</p>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#branch-strategy","title":"Branch Strategy","text":"<ul> <li><code>main</code>: Released code</li> <li><code>develop</code>: Code in development</li> <li>Feature branches: <code>feature/xxxx</code></li> <li>Bug fix branches: <code>fix/xxxx</code></li> </ul>"},{"location":"contributing/#adding-a-feature-or-fixing-a-bug","title":"Adding a Feature or Fixing a Bug","text":"<ol> <li>Create a new branch from the latest <code>develop</code>:</li> </ol> <pre><code>git checkout develop\ngit pull\ngit checkout -b feature/your-feature-name\n</code></pre> <ol> <li> <p>Implement your changes.</p> </li> <li> <p>Add or update tests and ensure all tests pass:</p> </li> </ol> <pre><code>poetry run pytest\n</code></pre> <ol> <li>Format your code and run linters:</li> </ol> <pre><code>poetry run black .\npoetry run isort .\npoetry run mypy .\n</code></pre> <ol> <li>Commit your changes (using Conventional Commits format):</li> </ol> <pre><code>git add .\ngit commit -m \"feat: add new feature X\"\n</code></pre> <ol> <li>Push your changes:</li> </ol> <pre><code>git push -u origin feature/your-feature-name\n</code></pre> <ol> <li>Create a pull request on GitHub, targeting the <code>develop</code> branch.</li> </ol>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Airulefy uses pytest for running tests:</p> <pre><code># Run all tests\npoetry run pytest\n\n# Generate coverage report\npoetry run pytest --cov=airulefy\n\n# Run specific test file\npoetry run pytest tests/test_cli.py\n</code></pre> <p>Make sure to add corresponding tests for new features and update tests when modifying existing functionality.</p>"},{"location":"contributing/#coding-conventions","title":"Coding Conventions","text":""},{"location":"contributing/#python-style-guide","title":"Python Style Guide","text":"<ul> <li>Follow PEP 8</li> <li>Use black and isort for automatic formatting</li> <li>Use mypy for type checking</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Add docstrings to all public functions, classes, and methods</li> <li>Use Google style docstrings</li> </ul>"},{"location":"contributing/#conventional-commits","title":"Conventional Commits","text":"<p>Commit messages should follow the Conventional Commits format:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>Types include:</p> <ul> <li><code>feat</code>: A new feature</li> <li><code>fix</code>: A bug fix</li> <li><code>docs</code>: Documentation-only changes</li> <li><code>style</code>: Changes that don't affect code meaning (whitespace, formatting, missing semi-colons, etc)</li> <li><code>refactor</code>: Code changes that neither fix a bug nor add a feature</li> <li><code>perf</code>: Code changes that improve performance</li> <li><code>test</code>: Adding missing tests or correcting existing tests</li> <li><code>chore</code>: Changes to the build process or auxiliary tools and libraries</li> </ul> <p>Example:</p> <pre><code>feat: add auto-reconnect feature to watch mode\n\nConnection now attempts to automatically reconnect every 30 seconds if disconnected.\nThis improves reliability during long-running operations.\n\nFixes #123\n</code></pre>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>Before submitting a pull request:</p> <ol> <li>Ensure your code passes all tests</li> <li>Ensure your code is properly formatted</li> <li>Update documentation as needed</li> <li>Include a detailed description of your changes in the pull request</li> </ol>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Airulefy releases follow these steps:</p> <ol> <li>Ensure all tests pass on the <code>develop</code> branch</li> <li>Update version number (in <code>pyproject.toml</code>)</li> <li>Update CHANGELOG</li> <li>Merge to <code>main</code> branch</li> <li>Create a release tag</li> <li>Publish to PyPI</li> </ol>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have questions or concerns, please create a new issue in the GitHub Issues section. We'll respond as soon as possible.</p> <p>We look forward to your contributions!</p>"},{"location":"devcontainer/","title":"DevContainer","text":"<p>Airulefy supports Visual Studio Code's DevContainer feature, allowing you to easily set up a development environment. This page explains how to configure and use DevContainers with Airulefy.</p>"},{"location":"devcontainer/#what-is-a-devcontainer","title":"What is a DevContainer?","text":"<p>A DevContainer is a VS Code feature that allows you to create a complete development environment within a Docker container. This ensures that every developer can work in the same consistent environment with identical settings, tools, and extensions.</p>"},{"location":"devcontainer/#airulefys-development-environment","title":"Airulefy's Development Environment","text":"<p>The Airulefy project provides a DevContainer configuration with the following features:</p> <ul> <li>Python 3.11 environment</li> <li>Poetry for Python package management</li> <li>Automatic test running</li> <li>Pre-installed code quality tools (black, isort, mypy)</li> <li>Automatic configuration of VS Code Python extensions</li> </ul>"},{"location":"devcontainer/#devcontainerjson","title":"devcontainer.json","text":"<p>The <code>.devcontainer/devcontainer.json</code> file is the main configuration file for the DevContainer. Here's an example configuration used in Airulefy:</p> <pre><code>{\n    \"name\": \"Airulefy Development\",\n    \"dockerFile\": \"Dockerfile\",\n    \"settings\": {\n        \"python.defaultInterpreterPath\": \"/usr/local/bin/python\",\n        \"python.linting.enabled\": true,\n        \"python.linting.pylintEnabled\": false,\n        \"python.linting.mypyEnabled\": true,\n        \"python.formatting.provider\": \"black\",\n        \"editor.formatOnSave\": true,\n        \"editor.codeActionsOnSave\": {\n            \"source.organizeImports\": true\n        }\n    },\n    \"extensions\": [\n        \"ms-python.python\",\n        \"ms-python.vscode-pylance\",\n        \"njpwerner.autodocstring\"\n    ],\n    \"postCreateCommand\": \"poetry install &amp;&amp; pre-commit install\",\n    \"remoteUser\": \"vscode\"\n}\n</code></pre>"},{"location":"devcontainer/#dockerfile","title":"Dockerfile","text":"<p>The <code>.devcontainer/Dockerfile</code> defines the base image and additional setup steps for the DevContainer:</p> <pre><code>FROM mcr.microsoft.com/devcontainers/python:3.11\n\n# Poetry environment variables\nENV POETRY_NO_INTERACTION=1 \\\n    POETRY_VIRTUALENVS_IN_PROJECT=1 \\\n    POETRY_VIRTUALENVS_CREATE=1 \\\n    POETRY_CACHE_DIR=/tmp/poetry_cache\n\n# Install Poetry\nRUN curl -sSL https://install.python-poetry.org | python3 - &amp;&amp; \\\n    poetry --version\n\n# Install necessary system packages\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n    make \\\n    &amp;&amp; apt-get clean \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /workspaces/Airulefy\n</code></pre>"},{"location":"devcontainer/#automatic-test-running","title":"Automatic Test Running","text":"<p>The Airulefy development environment is configured to automatically run tests in the background. This is set up in <code>.vscode/settings.json</code> as follows:</p> <pre><code>{\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.unittestEnabled\": false,\n    \"python.testing.nosetestsEnabled\": false,\n    \"python.testing.pytestArgs\": [\n        \"tests\"\n    ],\n    \"python.testing.autoTestDiscoverOnSaveEnabled\": true\n}\n</code></pre> <p>This will automatically run relevant tests whenever you save a file.</p>"},{"location":"devcontainer/#using-the-development-container","title":"Using the Development Container","text":"<ol> <li> <p>Install Visual Studio Code and the Remote - Containers extension</p> </li> <li> <p>Clone the Airulefy repository:    <pre><code>git clone https://github.com/airulefy/Airulefy.git\ncd Airulefy\n</code></pre></p> </li> <li> <p>Open the folder in VS Code:    <pre><code>code .\n</code></pre></p> </li> <li> <p>VS Code will detect the <code>.devcontainer</code> folder and show a notification; select \"Reopen in Container\"</p> </li> <li> <p>Wait for the container to build and configure (this may take a few minutes the first time)</p> </li> <li> <p>You're now ready to start developing Airulefy in a fully configured environment!</p> </li> </ol>"},{"location":"devcontainer/#troubleshooting","title":"Troubleshooting","text":""},{"location":"devcontainer/#rebuilding-the-container","title":"Rebuilding the Container","text":"<p>If dependencies change or you need to rebuild the container for any reason:</p> <ol> <li>Open the VS Code command palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>)</li> <li>Select \"Remote-Containers: Rebuild Container\"</li> </ol>"},{"location":"devcontainer/#port-forwarding","title":"Port Forwarding","text":"<p>To access services running inside the container, use port forwarding. VS Code will automatically detect many ports, but you can add them manually:</p> <ol> <li>Open the VS Code command palette</li> <li>Select \"Remote-Containers: Forward Port from Container\"</li> <li>Enter the port number you want to forward</li> </ol>"},{"location":"how_it_works/","title":"How It Works","text":"<p>This page explains Airulefy's internal workings and architecture, which may be useful for developers interested in customizing the tool, fixing bugs, or adding new features.</p>"},{"location":"how_it_works/#architecture-overview","title":"Architecture Overview","text":"<p>Airulefy implements a simple pipeline to generate configuration files for multiple AI tools from a single source of truth.</p> <pre><code>flowchart TB\n    subgraph Input\n        MD[\".ai/ Markdown Files\"]\n        Conf[\".ai-rules.yml Configuration\"]\n    end\n\n    subgraph Core\n        Reader[\"Markdown Reader\"]\n        Config[\"Configuration Loader\"]\n\n        subgraph Adapters\n            Cursor[\"Cursor Adapter\"]\n            Cline[\"Cline Adapter\"]\n            Copilot[\"Copilot Adapter\"]\n            Devin[\"Devin Adapter\"]\n        end\n    end\n\n    subgraph Output\n        CursorOut[\".cursor/rules/*.mdc\"]\n        ClineOut[\".cline-rules\"]\n        CopilotOut[\".github/copilot-instructions.md\"]\n        DevinOut[\"devin-guidelines.md\"]\n    end\n\n    MD --&gt; Reader\n    Conf --&gt; Config\n    Config --&gt; Reader\n\n    Reader --&gt; Cursor\n    Reader --&gt; Cline\n    Reader --&gt; Copilot\n    Reader --&gt; Devin\n\n    Cursor --&gt; CursorOut\n    Cline --&gt; ClineOut\n    Copilot --&gt; CopilotOut\n    Devin --&gt; DevinOut\n\n    Config --&gt; Adapters</code></pre>"},{"location":"how_it_works/#key-components","title":"Key Components","text":""},{"location":"how_it_works/#1-configuration-management","title":"1. Configuration Management","text":"<p>Airulefy loads configuration from the <code>.ai-rules.yml</code> file, using Pydantic models for validation and providing default values.</p> <p>Key responsibilities: - Parse configuration file - Provide default values - Validate configuration</p>"},{"location":"how_it_works/#2-markdown-file-processing","title":"2. Markdown File Processing","text":"<p>Reads all Markdown files from the <code>.ai/</code> directory (or configured input path).</p> <p>Key responsibilities: - Detect Markdown files - Read file contents - Extract metadata if needed</p>"},{"location":"how_it_works/#3-tool-specific-adapters","title":"3. Tool-Specific Adapters","text":"<p>Each AI tool has a dedicated adapter that converts the Markdown content to the format required by that tool.</p> <p>Key responsibilities: - Convert to tool-specific format - Add necessary metadata or headers - Determine output destination</p>"},{"location":"how_it_works/#supported-adapters","title":"Supported Adapters","text":"<ul> <li>Cursor: Generates <code>.mdc</code> files in the <code>.cursor/rules/</code> directory</li> <li>Cline: Generates standard Markdown in the <code>.cline-rules</code> file</li> <li>Copilot: Generates GitHub Copilot instructions in <code>.github/copilot-instructions.md</code></li> <li>Devin: Generates Devin guidelines in <code>devin-guidelines.md</code></li> </ul>"},{"location":"how_it_works/#4-file-system-operations","title":"4. File System Operations","text":"<p>Creates files according to the configured mode (symlink or copy).</p> <p>Key responsibilities: - Create output directories - Generate files in appropriate mode (symlink or copy) - Handle existing files</p>"},{"location":"how_it_works/#5-change-watching-watch-mode","title":"5. Change Watching (Watch Mode)","text":"<p>When using the <code>airulefy watch</code> command, monitors the input directory for changes and automatically regenerates files.</p> <p>Key responsibilities: - Monitor file system events - Trigger regeneration on changes</p>"},{"location":"how_it_works/#processing-flow","title":"Processing Flow","text":"<ol> <li>Load configuration file (if it exists)</li> <li>Detect Markdown files from input directory</li> <li>Process content with each adapter</li> <li>Generate files in appropriate mode (symlink or copy)</li> <li>Report results</li> </ol> <pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Config as Config Loader\n    participant FSUtils as FS Utilities\n    participant Adapters\n    participant FS as File System\n\n    User-&gt;&gt;CLI: airulefy generate\n    CLI-&gt;&gt;Config: Load configuration\n    Config-&gt;&gt;FS: Look for .ai-rules.yml\n    FS--&gt;&gt;Config: Configuration content\n    CLI-&gt;&gt;FSUtils: Find Markdown files\n    FSUtils-&gt;&gt;FS: Scan .ai/ directory\n    FS--&gt;&gt;FSUtils: Markdown file list\n    FSUtils--&gt;&gt;CLI: Markdown file list\n\n    loop For Each Tool Adapter\n        CLI-&gt;&gt;Adapters: Process Markdown\n        Adapters-&gt;&gt;FS: Generate/Link output file\n        FS--&gt;&gt;Adapters: Result\n        Adapters--&gt;&gt;CLI: Processing result\n    end\n\n    CLI--&gt;&gt;User: Display results</code></pre>"},{"location":"how_it_works/#extensibility","title":"Extensibility","text":"<p>Airulefy is designed to be easily extended to support new AI tools. To add a new tool, you simply implement the basic adapter interface and add the new tool to the configuration.</p>"},{"location":"installation/","title":"Installation","text":"<p>Airulefy can be installed in various ways. Choose the method that fits your environment and preferences.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>pip or Poetry (recommended)</li> </ul>"},{"location":"installation/#installation-with-poetry-recommended","title":"Installation with Poetry (Recommended)","text":"<p>Poetry is a modern Python package manager that makes dependency management and environment isolation easier.</p> <pre><code># If you don't have Poetry installed yet\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Install Airulefy\npoetry add airulefy\n</code></pre> <p>To install as a development dependency for an existing project:</p> <pre><code>poetry add --dev airulefy\n</code></pre>"},{"location":"installation/#installation-with-pip","title":"Installation with pip","text":"<p>Install using the standard Python package manager:</p> <pre><code>pip install airulefy\n</code></pre> <p>To install a specific version:</p> <pre><code>pip install airulefy==0.1.0\n</code></pre>"},{"location":"installation/#devcontainer-setup","title":"DevContainer Setup","text":"<p>If you're using VS Code's DevContainer, you can easily set up the environment:</p> <ol> <li>Add the following to your <code>.devcontainer/devcontainer.json</code> file:</li> </ol> <pre><code>{\n  \"name\": \"Python Development\",\n  \"image\": \"mcr.microsoft.com/devcontainers/python:3.11\",\n  \"postCreateCommand\": \"pip install airulefy\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"ms-python.python\"\n      ]\n    }\n  }\n}\n</code></pre> <ol> <li>Restart your DevContainer, and Airulefy will be automatically installed.</li> </ol>"},{"location":"installation/#using-with-github-codespaces","title":"Using with GitHub Codespaces","text":"<p>When using GitHub Codespaces:</p> <ol> <li>Include the DevContainer configuration in your repository (see above)</li> <li>When you launch Codespaces, Airulefy will be automatically installed</li> <li>Alternatively, you can install directly in the Codespaces terminal:</li> </ol> <pre><code>pip install airulefy\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":"<p>This quickstart guide will help you learn the basics of Airulefy in 5 minutes.</p>"},{"location":"quickstart/#1-prepare-your-project","title":"1. Prepare Your Project","text":"<p>First, create a directory for your AI rules:</p> <pre><code># In your project's root directory\nmkdir -p .ai\n</code></pre>"},{"location":"quickstart/#2-create-ai-rule-files","title":"2. Create AI Rule Files","text":"<p>Create Markdown files in the <code>.ai</code> directory:</p> <pre><code>cat &gt; .ai/main.md &lt;&lt; EOL\n# Project Rules\n\nPlease follow these coding conventions in this project:\n\n## Code Conventions\n- Use spaces for indentation (not tabs)\n- Use camelCase for variable names\n- Use snake_case for function names\n- Write comments in English\n\n## Error Handling\n- Properly catch exceptions\n- Log exceptions\nEOL\n</code></pre> <p>You can create additional rule files as needed:</p> <pre><code>cat &gt; .ai/architecture.md &lt;&lt; EOL\n# Architecture Guidelines\n\n## Layered Architecture\nThis project follows these layers:\n- Presentation layer\n- Business logic layer\n- Data access layer\nEOL\n</code></pre>"},{"location":"quickstart/#3-create-a-configuration-file-optional","title":"3. Create a Configuration File (Optional)","text":"<p>Optionally, create a <code>.ai-rules.yml</code> configuration file:</p> <pre><code>cat &gt; .ai-rules.yml &lt;&lt; EOL\ndefault_mode: symlink\ntools:\n  cursor:\n    output: \".cursor/rules/core.mdc\"\n  cline:\n    mode: copy\n  copilot: {}\n  devin:\n    output: \"devin-guidelines.md\"\nEOL\n</code></pre>"},{"location":"quickstart/#4-generate-ai-rules","title":"4. Generate AI Rules","text":"<p>Generate the AI rules for each tool:</p> <pre><code>airulefy generate\n</code></pre> <p>Example output:</p> <pre><code>Successfully generated rule files:\n- .cursor/rules/core.mdc [symlink]\n- .cline-rules [copy]\n- .github/copilot-instructions.md [symlink]\n- devin-guidelines.md [symlink]\n</code></pre> <p>For more detailed output, use the <code>-v</code> option:</p> <pre><code>airulefy generate -v\n</code></pre>"},{"location":"quickstart/#5-watch-mode-optional","title":"5. Watch Mode (Optional)","text":"<p>You can run a watch mode that automatically regenerates rules when the <code>.ai</code> directory changes:</p> <pre><code>airulefy watch\n</code></pre> <p>This will update all tool-specific files whenever you edit a rule file.</p>"},{"location":"quickstart/#6-list-supported-tools","title":"6. List Supported Tools","text":"<p>To see the list of supported AI tools and their configurations:</p> <pre><code>airulefy list-tools\n</code></pre>"},{"location":"quickstart/#7-validate-configuration","title":"7. Validate Configuration","text":"<p>To validate the current configuration and rule files:</p> <pre><code>airulefy validate\n</code></pre>"},{"location":"en/","title":"Airulefy","text":"<p>Unify your AI rules. One source of truth, synced across all major AI coding agents.</p> <p>Airulefy makes it easy to maintain a single set of rules in <code>.ai/</code> directory and automatically generate or link them to each tool-specific format (Cursor, Copilot, Cline, Devin, etc.). No more copy-pasting. No more inconsistent behavior.</p>"},{"location":"en/#key-features","title":"Key Features","text":"<ul> <li>Unified <code>.ai/</code> folder for all your project-wide AI rules (Markdown)</li> <li>Auto-generate:</li> <li><code>.cursor/rules/*.mdc</code></li> <li><code>.cline-rules</code></li> <li><code>.github/copilot-instructions.md</code></li> <li><code>devin-guidelines.md</code></li> <li>Symlink or copy mode (auto-detects OS capability)</li> <li>Optional YAML config: <code>.ai-rules.yml</code></li> <li>Works with CI and pre-commit hooks</li> </ul>"},{"location":"en/#why-airulefy","title":"Why Airulefy?","text":"<p>As AI-driven development tools become more prevalent, each tool receives instructions in its own format and location. This makes it difficult to maintain when using multiple tools, as you need to update the same instructions in multiple places.</p> <p>Airulefy solves this problem by automatically generating or linking files from a single source of truth to the format needed by each AI tool.</p>"},{"location":"en/cli_reference/","title":"CLI Reference","text":"<p>Airulefy can be operated through a command-line interface (CLI). This page describes all available commands and options.</p>"},{"location":"en/cli_reference/#basic-usage","title":"Basic Usage","text":"<pre><code>airulefy [options] [command]\n</code></pre>"},{"location":"en/cli_reference/#global-options","title":"Global Options","text":"Option Description <code>--version</code> Show version information and exit <code>--help</code> Show help message and exit"},{"location":"en/cli_reference/#commands","title":"Commands","text":""},{"location":"en/cli_reference/#generate","title":"generate","text":"<p>Generate AI rule files.</p> <pre><code>airulefy generate [options]\n</code></pre> <p>Options:</p> Option Description <code>--copy</code>, <code>-c</code> Force copy mode instead of symlink <code>--verbose</code>, <code>-v</code> Show detailed output <code>--help</code> Show help message <p>Examples:</p> <pre><code># Generate rules using the default mode (as defined in configuration)\nairulefy generate\n\n# Generate rules using copy mode\nairulefy generate --copy\n\n# Generate rules with detailed output\nairulefy generate --verbose\n</code></pre>"},{"location":"en/cli_reference/#watch","title":"watch","text":"<p>Watch the <code>.ai/</code> directory for changes and automatically regenerate rule files.</p> <pre><code>airulefy watch [options]\n</code></pre> <p>Options:</p> Option Description <code>--copy</code>, <code>-c</code> Force copy mode instead of symlink <code>--help</code> Show help message <p>Examples:</p> <pre><code># Watch for changes using default mode\nairulefy watch\n\n# Watch for changes using copy mode\nairulefy watch --copy\n</code></pre>"},{"location":"en/cli_reference/#validate","title":"validate","text":"<p>Validate the configuration and rule files.</p> <pre><code>airulefy validate\n</code></pre> <p>Options:</p> Option Description <code>--help</code> Show help message <p>Examples:</p> <pre><code>airulefy validate\n</code></pre>"},{"location":"en/cli_reference/#list-tools","title":"list-tools","text":"<p>List supported AI tools and their configurations.</p> <pre><code>airulefy list-tools\n</code></pre> <p>Options:</p> Option Description <code>--help</code> Show help message <p>Examples:</p> <pre><code>airulefy list-tools\n</code></pre>"},{"location":"en/cli_reference/#exit-codes","title":"Exit Codes","text":"Code Description 0 Success 1 Error/Failure"},{"location":"en/configuration/","title":"Configuration","text":"<p>You can customize Airulefy's behavior through the <code>.ai-rules.yml</code> configuration file.  This page describes all available configuration options and provides examples.</p>"},{"location":"en/configuration/#basic-configuration","title":"Basic Configuration","text":"<p>Create a file named <code>.ai-rules.yml</code> in your project's root directory. Here's a basic example:</p> <pre><code>default_mode: symlink\ninput_path: .ai\ntools:\n  cursor: {}\n  cline: {}\n  copilot: {}\n  devin: {}\n</code></pre>"},{"location":"en/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"en/configuration/#global-settings","title":"Global Settings","text":"Option Description Default Value Valid Values <code>default_mode</code> Default synchronization mode <code>symlink</code> <code>symlink</code>, <code>copy</code> <code>input_path</code> Path to directory containing AI rule files <code>.ai</code> Any relative path"},{"location":"en/configuration/#tool-specific-settings","title":"Tool-Specific Settings","text":"<p>Each tool can have the following options:</p> Option Description Default Value Valid Values <code>mode</code> Synchronization mode for this tool Value of <code>default_mode</code> <code>symlink</code>, <code>copy</code> <code>output</code> Output file path Tool-specific Any relative path"},{"location":"en/configuration/#supported-tools-and-default-outputs","title":"Supported Tools and Default Outputs","text":"Tool Name Default Output Path <code>cursor</code> <code>.cursor/rules/core.mdc</code> <code>cline</code> <code>.cline-rules</code> <code>copilot</code> <code>.github/copilot-instructions.md</code> <code>devin</code> <code>devin-guidelines.md</code>"},{"location":"en/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"en/configuration/#simple-configuration","title":"Simple Configuration","text":"<pre><code>default_mode: symlink\n</code></pre> <p>Use symlinks for all tools with default output paths.</p>"},{"location":"en/configuration/#custom-output-paths","title":"Custom Output Paths","text":"<pre><code>default_mode: symlink\ntools:\n  cursor:\n    output: \".cursor/rules/project-rules.mdc\"\n  devin:\n    output: \"docs/devin-instructions.md\"\n</code></pre> <p>Customize the output paths for Cursor and Devin.</p>"},{"location":"en/configuration/#mixed-modes","title":"Mixed Modes","text":"<pre><code>default_mode: symlink\ntools:\n  cursor: {}  # Use symlink\n  cline:\n    mode: copy  # Use copy\n  copilot:\n    mode: symlink  # Explicitly specify symlink\n  devin:\n    mode: copy  # Use copy\n    output: \"custom/path/devin-guide.md\"  # Custom output path\n</code></pre> <p>Specify different synchronization modes and output paths for each tool.</p>"},{"location":"en/configuration/#custom-input-path","title":"Custom Input Path","text":"<pre><code>default_mode: symlink\ninput_path: \"docs/ai-rules\"\n</code></pre> <p>Read AI rule files from <code>docs/ai-rules</code> directory instead of <code>.ai</code>.</p>"},{"location":"en/configuration/#notes","title":"Notes","text":"<ul> <li><code>symlink</code> mode may require administrator privileges on Windows</li> <li>In environments where symlinks are not supported, <code>copy</code> mode is automatically used</li> <li>Output directories are automatically created if the file doesn't exist</li> </ul>"},{"location":"en/contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to the Airulefy project! This guide explains how to set up your development environment, create pull requests, and follow coding conventions.</p>"},{"location":"en/contributing/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"en/contributing/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or higher</li> <li>Poetry (for package management)</li> <li>Git</li> </ul>"},{"location":"en/contributing/#setup-steps","title":"Setup Steps","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/airulefy/Airulefy.git\ncd Airulefy\n</code></pre> <ol> <li>Install dependencies with Poetry:</li> </ol> <pre><code># If you don't have Poetry installed yet\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Install dependencies\npoetry install\n</code></pre> <ol> <li>Install pre-commit hooks:</li> </ol> <pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"en/contributing/#using-devcontainer","title":"Using DevContainer","text":"<p>If you're using VS Code with extensions, you can easily set up a development environment with DevContainer:</p> <ol> <li>After cloning the repository, open it in VS Code:</li> </ol> <pre><code>git clone https://github.com/airulefy/Airulefy.git\ncode Airulefy\n</code></pre> <ol> <li>When VS Code detects the <code>.devcontainer</code> folder, select \"Reopen in Container\".</li> </ol> <p>See the DevContainer documentation for more details.</p>"},{"location":"en/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"en/contributing/#branch-strategy","title":"Branch Strategy","text":"<ul> <li><code>main</code>: Released code</li> <li><code>develop</code>: Code in development</li> <li>Feature branches: <code>feature/xxxx</code></li> <li>Bug fix branches: <code>fix/xxxx</code></li> </ul>"},{"location":"en/contributing/#adding-a-feature-or-fixing-a-bug","title":"Adding a Feature or Fixing a Bug","text":"<ol> <li>Create a new branch from the latest <code>develop</code>:</li> </ol> <pre><code>git checkout develop\ngit pull\ngit checkout -b feature/your-feature-name\n</code></pre> <ol> <li> <p>Implement your changes.</p> </li> <li> <p>Add or update tests and ensure all tests pass:</p> </li> </ol> <pre><code>poetry run pytest\n</code></pre> <ol> <li>Format your code and run linters:</li> </ol> <pre><code>poetry run black .\npoetry run isort .\npoetry run mypy .\n</code></pre> <ol> <li>Commit your changes (using Conventional Commits format):</li> </ol> <pre><code>git add .\ngit commit -m \"feat: add new feature X\"\n</code></pre> <ol> <li>Push your changes:</li> </ol> <pre><code>git push -u origin feature/your-feature-name\n</code></pre> <ol> <li>Create a pull request on GitHub, targeting the <code>develop</code> branch.</li> </ol>"},{"location":"en/contributing/#testing","title":"Testing","text":"<p>Airulefy uses pytest for running tests:</p> <pre><code># Run all tests\npoetry run pytest\n\n# Generate coverage report\npoetry run pytest --cov=airulefy\n\n# Run specific test file\npoetry run pytest tests/test_cli.py\n</code></pre> <p>Make sure to add corresponding tests for new features and update tests when modifying existing functionality.</p>"},{"location":"en/contributing/#coding-conventions","title":"Coding Conventions","text":""},{"location":"en/contributing/#python-style-guide","title":"Python Style Guide","text":"<ul> <li>Follow PEP 8</li> <li>Use black and isort for automatic formatting</li> <li>Use mypy for type checking</li> </ul>"},{"location":"en/contributing/#documentation","title":"Documentation","text":"<ul> <li>Add docstrings to all public functions, classes, and methods</li> <li>Use Google style docstrings</li> </ul>"},{"location":"en/contributing/#conventional-commits","title":"Conventional Commits","text":"<p>Commit messages should follow the Conventional Commits format:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>Types include:</p> <ul> <li><code>feat</code>: A new feature</li> <li><code>fix</code>: A bug fix</li> <li><code>docs</code>: Documentation-only changes</li> <li><code>style</code>: Changes that don't affect code meaning (whitespace, formatting, missing semi-colons, etc)</li> <li><code>refactor</code>: Code changes that neither fix a bug nor add a feature</li> <li><code>perf</code>: Code changes that improve performance</li> <li><code>test</code>: Adding missing tests or correcting existing tests</li> <li><code>chore</code>: Changes to the build process or auxiliary tools and libraries</li> </ul> <p>Example:</p> <pre><code>feat: add auto-reconnect feature to watch mode\n\nConnection now attempts to automatically reconnect every 30 seconds if disconnected.\nThis improves reliability during long-running operations.\n\nFixes #123\n</code></pre>"},{"location":"en/contributing/#pull-requests","title":"Pull Requests","text":"<p>Before submitting a pull request:</p> <ol> <li>Ensure your code passes all tests</li> <li>Ensure your code is properly formatted</li> <li>Update documentation as needed</li> <li>Include a detailed description of your changes in the pull request</li> </ol>"},{"location":"en/contributing/#release-process","title":"Release Process","text":"<p>Airulefy releases follow these steps:</p> <ol> <li>Ensure all tests pass on the <code>develop</code> branch</li> <li>Update version number (in <code>pyproject.toml</code>)</li> <li>Update CHANGELOG</li> <li>Merge to <code>main</code> branch</li> <li>Create a release tag</li> <li>Publish to PyPI</li> </ol>"},{"location":"en/contributing/#questions","title":"Questions?","text":"<p>If you have questions or concerns, please create a new issue in the GitHub Issues section. We'll respond as soon as possible.</p> <p>We look forward to your contributions!</p>"},{"location":"en/devcontainer/","title":"DevContainer","text":"<p>Airulefy supports Visual Studio Code's DevContainer feature, allowing you to easily set up a development environment. This page explains how to configure and use DevContainers with Airulefy.</p>"},{"location":"en/devcontainer/#what-is-a-devcontainer","title":"What is a DevContainer?","text":"<p>A DevContainer is a VS Code feature that allows you to create a complete development environment within a Docker container. This ensures that every developer can work in the same consistent environment with identical settings, tools, and extensions.</p>"},{"location":"en/devcontainer/#airulefys-development-environment","title":"Airulefy's Development Environment","text":"<p>The Airulefy project provides a DevContainer configuration with the following features:</p> <ul> <li>Python 3.11 environment</li> <li>Poetry for Python package management</li> <li>Automatic test running</li> <li>Pre-installed code quality tools (black, isort, mypy)</li> <li>Automatic configuration of VS Code Python extensions</li> </ul>"},{"location":"en/devcontainer/#devcontainerjson","title":"devcontainer.json","text":"<p>The <code>.devcontainer/devcontainer.json</code> file is the main configuration file for the DevContainer. Here's an example configuration used in Airulefy:</p> <pre><code>{\n    \"name\": \"Airulefy Development\",\n    \"dockerFile\": \"Dockerfile\",\n    \"settings\": {\n        \"python.defaultInterpreterPath\": \"/usr/local/bin/python\",\n        \"python.linting.enabled\": true,\n        \"python.linting.pylintEnabled\": false,\n        \"python.linting.mypyEnabled\": true,\n        \"python.formatting.provider\": \"black\",\n        \"editor.formatOnSave\": true,\n        \"editor.codeActionsOnSave\": {\n            \"source.organizeImports\": true\n        }\n    },\n    \"extensions\": [\n        \"ms-python.python\",\n        \"ms-python.vscode-pylance\",\n        \"njpwerner.autodocstring\"\n    ],\n    \"postCreateCommand\": \"poetry install &amp;&amp; pre-commit install\",\n    \"remoteUser\": \"vscode\"\n}\n</code></pre>"},{"location":"en/devcontainer/#dockerfile","title":"Dockerfile","text":"<p>The <code>.devcontainer/Dockerfile</code> defines the base image and additional setup steps for the DevContainer:</p> <pre><code>FROM mcr.microsoft.com/devcontainers/python:3.11\n\n# Poetry environment variables\nENV POETRY_NO_INTERACTION=1 \\\n    POETRY_VIRTUALENVS_IN_PROJECT=1 \\\n    POETRY_VIRTUALENVS_CREATE=1 \\\n    POETRY_CACHE_DIR=/tmp/poetry_cache\n\n# Install Poetry\nRUN curl -sSL https://install.python-poetry.org | python3 - &amp;&amp; \\\n    poetry --version\n\n# Install necessary system packages\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n    make \\\n    &amp;&amp; apt-get clean \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /workspaces/Airulefy\n</code></pre>"},{"location":"en/devcontainer/#automatic-test-running","title":"Automatic Test Running","text":"<p>The Airulefy development environment is configured to automatically run tests in the background. This is set up in <code>.vscode/settings.json</code> as follows:</p> <pre><code>{\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.unittestEnabled\": false,\n    \"python.testing.nosetestsEnabled\": false,\n    \"python.testing.pytestArgs\": [\n        \"tests\"\n    ],\n    \"python.testing.autoTestDiscoverOnSaveEnabled\": true\n}\n</code></pre> <p>This will automatically run relevant tests whenever you save a file.</p>"},{"location":"en/devcontainer/#using-the-development-container","title":"Using the Development Container","text":"<ol> <li> <p>Install Visual Studio Code and the Remote - Containers extension</p> </li> <li> <p>Clone the Airulefy repository:    <pre><code>git clone https://github.com/airulefy/Airulefy.git\ncd Airulefy\n</code></pre></p> </li> <li> <p>Open the folder in VS Code:    <pre><code>code .\n</code></pre></p> </li> <li> <p>VS Code will detect the <code>.devcontainer</code> folder and show a notification; select \"Reopen in Container\"</p> </li> <li> <p>Wait for the container to build and configure (this may take a few minutes the first time)</p> </li> <li> <p>You're now ready to start developing Airulefy in a fully configured environment!</p> </li> </ol>"},{"location":"en/devcontainer/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/devcontainer/#rebuilding-the-container","title":"Rebuilding the Container","text":"<p>If dependencies change or you need to rebuild the container for any reason:</p> <ol> <li>Open the VS Code command palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>)</li> <li>Select \"Remote-Containers: Rebuild Container\"</li> </ol>"},{"location":"en/devcontainer/#port-forwarding","title":"Port Forwarding","text":"<p>To access services running inside the container, use port forwarding. VS Code will automatically detect many ports, but you can add them manually:</p> <ol> <li>Open the VS Code command palette</li> <li>Select \"Remote-Containers: Forward Port from Container\"</li> <li>Enter the port number you want to forward</li> </ol>"},{"location":"en/how_it_works/","title":"How It Works","text":"<p>This page explains Airulefy's internal workings and architecture, which may be useful for developers interested in customizing the tool, fixing bugs, or adding new features.</p>"},{"location":"en/how_it_works/#architecture-overview","title":"Architecture Overview","text":"<p>Airulefy implements a simple pipeline to generate configuration files for multiple AI tools from a single source of truth.</p> <pre><code>flowchart TB\n    subgraph Input\n        MD[\".ai/ Markdown Files\"]\n        Conf[\".ai-rules.yml Configuration\"]\n    end\n\n    subgraph Core\n        Reader[\"Markdown Reader\"]\n        Config[\"Configuration Loader\"]\n\n        subgraph Adapters\n            Cursor[\"Cursor Adapter\"]\n            Cline[\"Cline Adapter\"]\n            Copilot[\"Copilot Adapter\"]\n            Devin[\"Devin Adapter\"]\n        end\n    end\n\n    subgraph Output\n        CursorOut[\".cursor/rules/*.mdc\"]\n        ClineOut[\".cline-rules\"]\n        CopilotOut[\".github/copilot-instructions.md\"]\n        DevinOut[\"devin-guidelines.md\"]\n    end\n\n    MD --&gt; Reader\n    Conf --&gt; Config\n    Config --&gt; Reader\n\n    Reader --&gt; Cursor\n    Reader --&gt; Cline\n    Reader --&gt; Copilot\n    Reader --&gt; Devin\n\n    Cursor --&gt; CursorOut\n    Cline --&gt; ClineOut\n    Copilot --&gt; CopilotOut\n    Devin --&gt; DevinOut\n\n    Config --&gt; Adapters</code></pre>"},{"location":"en/how_it_works/#key-components","title":"Key Components","text":""},{"location":"en/how_it_works/#1-configuration-management","title":"1. Configuration Management","text":"<p>Airulefy loads configuration from the <code>.ai-rules.yml</code> file, using Pydantic models for validation and providing default values.</p> <p>Key responsibilities: - Parse configuration file - Provide default values - Validate configuration</p>"},{"location":"en/how_it_works/#2-markdown-file-processing","title":"2. Markdown File Processing","text":"<p>Reads all Markdown files from the <code>.ai/</code> directory (or configured input path).</p> <p>Key responsibilities: - Detect Markdown files - Read file contents - Extract metadata if needed</p>"},{"location":"en/how_it_works/#3-tool-specific-adapters","title":"3. Tool-Specific Adapters","text":"<p>Each AI tool has a dedicated adapter that converts the Markdown content to the format required by that tool.</p> <p>Key responsibilities: - Convert to tool-specific format - Add necessary metadata or headers - Determine output destination</p>"},{"location":"en/how_it_works/#supported-adapters","title":"Supported Adapters","text":"<ul> <li>Cursor: Generates <code>.mdc</code> files in the <code>.cursor/rules/</code> directory</li> <li>Cline: Generates standard Markdown in the <code>.cline-rules</code> file</li> <li>Copilot: Generates GitHub Copilot instructions in <code>.github/copilot-instructions.md</code></li> <li>Devin: Generates Devin guidelines in <code>devin-guidelines.md</code></li> </ul>"},{"location":"en/how_it_works/#4-file-system-operations","title":"4. File System Operations","text":"<p>Creates files according to the configured mode (symlink or copy).</p> <p>Key responsibilities: - Create output directories - Generate files in appropriate mode (symlink or copy) - Handle existing files</p>"},{"location":"en/how_it_works/#5-change-watching-watch-mode","title":"5. Change Watching (Watch Mode)","text":"<p>When using the <code>airulefy watch</code> command, monitors the input directory for changes and automatically regenerates files.</p> <p>Key responsibilities: - Monitor file system events - Trigger regeneration on changes</p>"},{"location":"en/how_it_works/#processing-flow","title":"Processing Flow","text":"<ol> <li>Load configuration file (if it exists)</li> <li>Detect Markdown files from input directory</li> <li>Process content with each adapter</li> <li>Generate files in appropriate mode (symlink or copy)</li> <li>Report results</li> </ol> <pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Config as Config Loader\n    participant FSUtils as FS Utilities\n    participant Adapters\n    participant FS as File System\n\n    User-&gt;&gt;CLI: airulefy generate\n    CLI-&gt;&gt;Config: Load configuration\n    Config-&gt;&gt;FS: Look for .ai-rules.yml\n    FS--&gt;&gt;Config: Configuration content\n    CLI-&gt;&gt;FSUtils: Find Markdown files\n    FSUtils-&gt;&gt;FS: Scan .ai/ directory\n    FS--&gt;&gt;FSUtils: Markdown file list\n    FSUtils--&gt;&gt;CLI: Markdown file list\n\n    loop For Each Tool Adapter\n        CLI-&gt;&gt;Adapters: Process Markdown\n        Adapters-&gt;&gt;FS: Generate/Link output file\n        FS--&gt;&gt;Adapters: Result\n        Adapters--&gt;&gt;CLI: Processing result\n    end\n\n    CLI--&gt;&gt;User: Display results</code></pre>"},{"location":"en/how_it_works/#extensibility","title":"Extensibility","text":"<p>Airulefy is designed to be easily extended to support new AI tools. To add a new tool, you simply implement the basic adapter interface and add the new tool to the configuration.</p>"},{"location":"en/installation/","title":"Installation","text":"<p>Airulefy can be installed in various ways. Choose the method that fits your environment and preferences.</p>"},{"location":"en/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>pip or Poetry (recommended)</li> </ul>"},{"location":"en/installation/#installation-with-poetry-recommended","title":"Installation with Poetry (Recommended)","text":"<p>Poetry is a modern Python package manager that makes dependency management and environment isolation easier.</p> <pre><code># If you don't have Poetry installed yet\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Install Airulefy\npoetry add airulefy\n</code></pre> <p>To install as a development dependency for an existing project:</p> <pre><code>poetry add --dev airulefy\n</code></pre>"},{"location":"en/installation/#installation-with-pip","title":"Installation with pip","text":"<p>Install using the standard Python package manager:</p> <pre><code>pip install airulefy\n</code></pre> <p>To install a specific version:</p> <pre><code>pip install airulefy==0.1.0\n</code></pre>"},{"location":"en/installation/#devcontainer-setup","title":"DevContainer Setup","text":"<p>If you're using VS Code's DevContainer, you can easily set up the environment:</p> <ol> <li>Add the following to your <code>.devcontainer/devcontainer.json</code> file:</li> </ol> <pre><code>{\n  \"name\": \"Python Development\",\n  \"image\": \"mcr.microsoft.com/devcontainers/python:3.11\",\n  \"postCreateCommand\": \"pip install airulefy\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"ms-python.python\"\n      ]\n    }\n  }\n}\n</code></pre> <ol> <li>Restart your DevContainer, and Airulefy will be automatically installed.</li> </ol>"},{"location":"en/installation/#using-with-github-codespaces","title":"Using with GitHub Codespaces","text":"<p>When using GitHub Codespaces:</p> <ol> <li>Include the DevContainer configuration in your repository (see above)</li> <li>When you launch Codespaces, Airulefy will be automatically installed</li> <li>Alternatively, you can install directly in the Codespaces terminal:</li> </ol> <pre><code>pip install airulefy\n</code></pre>"},{"location":"en/quickstart/","title":"Quickstart","text":"<p>This quickstart guide will help you learn the basics of Airulefy in 5 minutes.</p>"},{"location":"en/quickstart/#1-prepare-your-project","title":"1. Prepare Your Project","text":"<p>First, create a directory for your AI rules:</p> <pre><code># In your project's root directory\nmkdir -p .ai\n</code></pre>"},{"location":"en/quickstart/#2-create-ai-rule-files","title":"2. Create AI Rule Files","text":"<p>Create Markdown files in the <code>.ai</code> directory:</p> <pre><code>cat &gt; .ai/main.md &lt;&lt; EOL\n# Project Rules\n\nPlease follow these coding conventions in this project:\n\n## Code Conventions\n- Use spaces for indentation (not tabs)\n- Use camelCase for variable names\n- Use snake_case for function names\n- Write comments in English\n\n## Error Handling\n- Properly catch exceptions\n- Log exceptions\nEOL\n</code></pre> <p>You can create additional rule files as needed:</p> <pre><code>cat &gt; .ai/architecture.md &lt;&lt; EOL\n# Architecture Guidelines\n\n## Layered Architecture\nThis project follows these layers:\n- Presentation layer\n- Business logic layer\n- Data access layer\nEOL\n</code></pre>"},{"location":"en/quickstart/#3-create-a-configuration-file-optional","title":"3. Create a Configuration File (Optional)","text":"<p>Optionally, create a <code>.ai-rules.yml</code> configuration file:</p> <pre><code>cat &gt; .ai-rules.yml &lt;&lt; EOL\ndefault_mode: symlink\ntools:\n  cursor:\n    output: \".cursor/rules/core.mdc\"\n  cline:\n    mode: copy\n  copilot: {}\n  devin:\n    output: \"devin-guidelines.md\"\nEOL\n</code></pre>"},{"location":"en/quickstart/#4-generate-ai-rules","title":"4. Generate AI Rules","text":"<p>Generate the AI rules for each tool:</p> <pre><code>airulefy generate\n</code></pre> <p>Example output:</p> <pre><code>Successfully generated rule files:\n- .cursor/rules/core.mdc [symlink]\n- .cline-rules [copy]\n- .github/copilot-instructions.md [symlink]\n- devin-guidelines.md [symlink]\n</code></pre> <p>For more detailed output, use the <code>-v</code> option:</p> <pre><code>airulefy generate -v\n</code></pre>"},{"location":"en/quickstart/#5-watch-mode-optional","title":"5. Watch Mode (Optional)","text":"<p>You can run a watch mode that automatically regenerates rules when the <code>.ai</code> directory changes:</p> <pre><code>airulefy watch\n</code></pre> <p>This will update all tool-specific files whenever you edit a rule file.</p>"},{"location":"en/quickstart/#6-list-supported-tools","title":"6. List Supported Tools","text":"<p>To see the list of supported AI tools and their configurations:</p> <pre><code>airulefy list-tools\n</code></pre>"},{"location":"en/quickstart/#7-validate-configuration","title":"7. Validate Configuration","text":"<p>To validate the current configuration and rule files:</p> <pre><code>airulefy validate\n</code></pre>"},{"location":"ja/","title":"Index","text":"<ul> <li>English</li> </ul>"},{"location":"ja/#airulefy","title":"Airulefy","text":"<p>AI\u30eb\u30fc\u30eb\u3092\u7d71\u4e00\u30021\u3064\u306e\u30bd\u30fc\u30b9\u304b\u3089\u3001\u4e3b\u8981\u306aAI\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u5168\u3066\u306b\u540c\u671f\u3002</p> <p>Airulefy\u306f\u3001<code>.ai/</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5358\u4e00\u306e\u30eb\u30fc\u30eb\u30bb\u30c3\u30c8\u3092\u7dad\u6301\u3057\u3001\u5404\u30c4\u30fc\u30eb\u56fa\u6709\u306e\u5f62\u5f0f\uff08Cursor\u3001 Copilot\u3001Cline\u3001Devin\u306a\u3069\uff09\u306b\u81ea\u52d5\u7684\u306b\u751f\u6210\u307e\u305f\u306f\u30ea\u30f3\u30af\u3059\u308b\u306e\u3092\u5bb9\u6613\u306b\u3057\u307e\u3059\u3002 \u30b3\u30d4\u30fc\uff06\u30da\u30fc\u30b9\u30c8\u306f\u4e0d\u8981\u3002\u4e00\u8cab\u6027\u306e\u306a\u3044\u52d5\u4f5c\u3082\u89e3\u6d88\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"ja/#_1","title":"\u4e3b\u306a\u6a5f\u80fd","text":"<ul> <li>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5168\u4f53\u306eAI\u30eb\u30fc\u30eb\uff08Markdown\uff09\u306e\u305f\u3081\u306e\u7d71\u4e00\u3055\u308c\u305f<code>.ai/</code>\u30d5\u30a9\u30eb\u30c0</li> <li>\u81ea\u52d5\u751f\u6210:</li> <li><code>.cursor/rules/*.mdc</code></li> <li><code>.cline-rules</code></li> <li><code>.github/copilot-instructions.md</code></li> <li><code>devin-guidelines.md</code></li> <li>\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u307e\u305f\u306f\u30b3\u30d4\u30fc\u30e2\u30fc\u30c9\uff08OS\u306e\u6a5f\u80fd\u3092\u81ea\u52d5\u691c\u51fa\uff09</li> <li>\u30aa\u30d7\u30b7\u30e7\u30f3\u306eYAML\u8a2d\u5b9a: <code>.ai-rules.yml</code></li> <li>CI\u304a\u3088\u3073pre-commit\u30d5\u30c3\u30af\u3068\u306e\u9023\u643a</li> </ul>"},{"location":"ja/#airulefy_1","title":"\u306a\u305cAirulefy\u304c\u5fc5\u8981\u304b","text":"<p>AI\u99c6\u52d5\u306e\u958b\u767a\u30c4\u30fc\u30eb\u304c\u666e\u53ca\u3059\u308b\u306b\u3064\u308c\u3066\u3001\u5404\u30c4\u30fc\u30eb\u306f\u72ec\u81ea\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068\u5834\u6240\u3067\u6307\u793a\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u8907\u6570\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u540c\u3058\u6307\u793a\u3092\u4f55\u5ea6\u3082\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u304c \u56f0\u96e3\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>Airulefy\u306f\u3001\u5358\u4e00\u306e\u4fe1\u983c\u3067\u304d\u308b\u60c5\u5831\u6e90\u304b\u3089\u5404AI\u30c4\u30fc\u30eb\u306b\u5fc5\u8981\u306a\u5f62\u5f0f\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u81ea\u52d5\u7684\u306b\u751f\u6210\u307e\u305f\u306f \u30ea\u30f3\u30af\u3059\u308b\u3053\u3068\u3067\u3001\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3057\u307e\u3059\u3002</p>"},{"location":"ja/cli_reference/","title":"CLI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p>Airulefy\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff08CLI\uff09\u3092\u901a\u3058\u3066\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001 \u5229\u7528\u53ef\u80fd\u306a\u3059\u3079\u3066\u306e\u30b3\u30de\u30f3\u30c9\u3068\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/cli_reference/#_1","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u6cd5","text":"<pre><code>airulefy [\u30aa\u30d7\u30b7\u30e7\u30f3] [\u30b3\u30de\u30f3\u30c9]\n</code></pre>"},{"location":"ja/cli_reference/#_2","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3","text":"\u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e <code>--version</code> \u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059 <code>--help</code> \u30d8\u30eb\u30d7\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059"},{"location":"ja/cli_reference/#_3","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":""},{"location":"ja/cli_reference/#generate","title":"generate","text":"<p>AI\u30eb\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\u3002</p> <pre><code>airulefy generate [\u30aa\u30d7\u30b7\u30e7\u30f3]\n</code></pre> <p>\u30aa\u30d7\u30b7\u30e7\u30f3:</p> \u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e <code>--copy</code>, <code>-c</code> \u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u306e\u4ee3\u308f\u308a\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059 <code>--verbose</code>, <code>-v</code> \u8a73\u7d30\u306a\u51fa\u529b\u3092\u8868\u793a\u3057\u307e\u3059 <code>--help</code> \u30d8\u30eb\u30d7\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059 <p>\u4f7f\u7528\u4f8b:</p> <pre><code># \u30c7\u30d5\u30a9\u30eb\u30c8\u30e2\u30fc\u30c9\uff08\u8a2d\u5b9a\u306b\u5f93\u3046\uff09\u3067\u30eb\u30fc\u30eb\u3092\u751f\u6210\nairulefy generate\n\n# \u30b3\u30d4\u30fc\u30e2\u30fc\u30c9\u3067\u30eb\u30fc\u30eb\u3092\u751f\u6210\nairulefy generate --copy\n\n# \u8a73\u7d30\u51fa\u529b\u4ed8\u304d\u3067\u30eb\u30fc\u30eb\u3092\u751f\u6210\nairulefy generate --verbose\n</code></pre>"},{"location":"ja/cli_reference/#watch","title":"watch","text":"<p><code>.ai/</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u76e3\u8996\u3057\u3001\u5909\u66f4\u304c\u3042\u308c\u3070\u81ea\u52d5\u7684\u306b\u30eb\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u751f\u6210\u3057\u307e\u3059\u3002</p> <pre><code>airulefy watch [\u30aa\u30d7\u30b7\u30e7\u30f3]\n</code></pre> <p>\u30aa\u30d7\u30b7\u30e7\u30f3:</p> \u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e <code>--copy</code>, <code>-c</code> \u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u306e\u4ee3\u308f\u308a\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059 <code>--help</code> \u30d8\u30eb\u30d7\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059 <p>\u4f7f\u7528\u4f8b:</p> <pre><code># \u30c7\u30d5\u30a9\u30eb\u30c8\u30e2\u30fc\u30c9\u3067\u5909\u66f4\u3092\u76e3\u8996\nairulefy watch\n\n# \u30b3\u30d4\u30fc\u30e2\u30fc\u30c9\u3067\u5909\u66f4\u3092\u76e3\u8996\nairulefy watch --copy\n</code></pre>"},{"location":"ja/cli_reference/#validate","title":"validate","text":"<p>\u8a2d\u5b9a\u3068\u30eb\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002</p> <pre><code>airulefy validate\n</code></pre> <p>\u30aa\u30d7\u30b7\u30e7\u30f3:</p> \u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e <code>--help</code> \u30d8\u30eb\u30d7\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059 <p>\u4f7f\u7528\u4f8b:</p> <pre><code>airulefy validate\n</code></pre>"},{"location":"ja/cli_reference/#list-tools","title":"list-tools","text":"<p>\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308bAI\u30c4\u30fc\u30eb\u3068\u305d\u306e\u8a2d\u5b9a\u3092\u4e00\u89a7\u8868\u793a\u3057\u307e\u3059\u3002</p> <pre><code>airulefy list-tools\n</code></pre> <p>\u30aa\u30d7\u30b7\u30e7\u30f3:</p> \u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e <code>--help</code> \u30d8\u30eb\u30d7\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059 <p>\u4f7f\u7528\u4f8b:</p> <pre><code>airulefy list-tools\n</code></pre>"},{"location":"ja/cli_reference/#_4","title":"\u7d42\u4e86\u30b3\u30fc\u30c9","text":"\u30b3\u30fc\u30c9 \u8aac\u660e 0 \u6210\u529f 1 \u30a8\u30e9\u30fc/\u5931\u6557"},{"location":"ja/configuration/","title":"\u8a2d\u5b9a\u65b9\u6cd5","text":"<p>Airulefy\u306e\u52d5\u4f5c\u306f\u3001<code>.ai-rules.yml</code>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u901a\u3058\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001\u5229\u7528\u53ef\u80fd\u306a\u3059\u3079\u3066\u306e\u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u4f7f\u7528\u4f8b\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/configuration/#_2","title":"\u57fa\u672c\u8a2d\u5b9a","text":"<p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b<code>.ai-rules.yml</code>\u3068\u3044\u3046\u540d\u524d\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002 \u57fa\u672c\u7684\u306a\u8a2d\u5b9a\u4f8b\uff1a</p> <pre><code>default_mode: symlink\ninput_path: .ai\ntools:\n  cursor: {}\n  cline: {}\n  copilot: {}\n  devin: {}\n</code></pre>"},{"location":"ja/configuration/#_3","title":"\u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3","text":""},{"location":"ja/configuration/#_4","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u8a2d\u5b9a","text":"\u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e \u30c7\u30d5\u30a9\u30eb\u30c8\u5024 \u6709\u52b9\u306a\u5024 <code>default_mode</code> \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u540c\u671f\u30e2\u30fc\u30c9 <code>symlink</code> <code>symlink</code>, <code>copy</code> <code>input_path</code> AI\u30eb\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u542b\u3080\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9 <code>.ai</code> \u4efb\u610f\u306e\u76f8\u5bfe\u30d1\u30b9"},{"location":"ja/configuration/#_5","title":"\u30c4\u30fc\u30eb\u56fa\u6709\u306e\u8a2d\u5b9a","text":"<p>\u5404\u30c4\u30fc\u30eb\u306b\u306f\u4ee5\u4e0b\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u8a2d\u5b9a\u53ef\u80fd\u3067\u3059\uff1a</p> \u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e \u30c7\u30d5\u30a9\u30eb\u30c8\u5024 \u6709\u52b9\u306a\u5024 <code>mode</code> \u3053\u306e\u30c4\u30fc\u30eb\u7528\u306e\u540c\u671f\u30e2\u30fc\u30c9 <code>default_mode</code>\u306e\u5024 <code>symlink</code>, <code>copy</code> <code>output</code> \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9 \u30c4\u30fc\u30eb\u306b\u3088\u308b \u4efb\u610f\u306e\u76f8\u5bfe\u30d1\u30b9"},{"location":"ja/configuration/#_6","title":"\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30c4\u30fc\u30eb\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u51fa\u529b\u5148","text":"\u30c4\u30fc\u30eb\u540d \u30c7\u30d5\u30a9\u30eb\u30c8\u51fa\u529b\u5148 <code>cursor</code> <code>.cursor/rules/core.mdc</code> <code>cline</code> <code>.cline-rules</code> <code>copilot</code> <code>.github/copilot-instructions.md</code> <code>devin</code> <code>devin-guidelines.md</code>"},{"location":"ja/configuration/#_7","title":"\u8a2d\u5b9a\u4f8b","text":""},{"location":"ja/configuration/#_8","title":"\u30b7\u30f3\u30d7\u30eb\u306a\u8a2d\u5b9a","text":"<pre><code>default_mode: symlink\n</code></pre> <p>\u3059\u3079\u3066\u306e\u30c4\u30fc\u30eb\u3067\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u4f7f\u7528\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u51fa\u529b\u5148\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p>"},{"location":"ja/configuration/#_9","title":"\u30c4\u30fc\u30eb\u56fa\u6709\u306e\u51fa\u529b\u5148","text":"<pre><code>default_mode: symlink\ntools:\n  cursor:\n    output: \".cursor/rules/project-rules.mdc\"\n  devin:\n    output: \"docs/devin-instructions.md\"\n</code></pre> <p>Cursor\u3068 Devin\u306e\u51fa\u529b\u5148\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3059\u3002</p>"},{"location":"ja/configuration/#_10","title":"\u6df7\u5408\u30e2\u30fc\u30c9","text":"<pre><code>default_mode: symlink\ntools:\n  cursor: {}  # \u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u4f7f\u7528\n  cline:\n    mode: copy  # \u30b3\u30d4\u30fc\u3092\u4f7f\u7528\n  copilot:\n    mode: symlink  # \u660e\u793a\u7684\u306b\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u6307\u5b9a\n  devin:\n    mode: copy  # \u30b3\u30d4\u30fc\u3092\u4f7f\u7528\n    output: \"custom/path/devin-guide.md\"  # \u30ab\u30b9\u30bf\u30e0\u51fa\u529b\u5148\n</code></pre> <p>\u30c4\u30fc\u30eb\u3054\u3068\u306b\u7570\u306a\u308b\u540c\u671f\u30e2\u30fc\u30c9\u3068\u51fa\u529b\u5148\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</p>"},{"location":"ja/configuration/#_11","title":"\u30ab\u30b9\u30bf\u30e0\u5165\u529b\u30d1\u30b9","text":"<pre><code>default_mode: symlink\ninput_path: \"docs/ai-rules\"\n</code></pre> <p>AI\u30eb\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092<code>.ai</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u306f\u306a\u304f<code>docs/ai-rules</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002</p>"},{"location":"ja/configuration/#_12","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li><code>symlink</code>\u30e2\u30fc\u30c9\u306fWindows\u4e0a\u3067\u7ba1\u7406\u8005\u6a29\u9650\u304c\u5fc5\u8981\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059</li> <li>\u4e00\u90e8\u306e\u74b0\u5883\u3067\u306f\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b<code>copy</code>\u30e2\u30fc\u30c9\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059</li> <li>\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u9650\u308a\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u81ea\u52d5\u7684\u306b\u4f5c\u6210\u3055\u308c\u307e\u3059</li> </ul>"},{"location":"ja/contributing/","title":"\u8ca2\u732e\u30ac\u30a4\u30c9","text":"<p>Airulefy\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u306e\u8ca2\u732e\u306b\u8208\u5473\u3092\u304a\u6301\u3061\u3044\u305f\u3060\u304d\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001 \u958b\u767a\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304b\u3089\u3001\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4f5c\u6210\u3001\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u306a\u3069\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/contributing/#_2","title":"\u958b\u767a\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","text":""},{"location":"ja/contributing/#_3","title":"\u5fc5\u8981\u6761\u4ef6","text":"<ul> <li>Python 3.11\u4ee5\u4e0a</li> <li>Poetry\uff08\u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u7528\uff09</li> <li>Git</li> </ul>"},{"location":"ja/contributing/#_4","title":"\u74b0\u5883\u69cb\u7bc9\u624b\u9806","text":"<ol> <li>\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>git clone https://github.com/airulefy/Airulefy.git\ncd Airulefy\n</code></pre> <ol> <li>Poetry\u3092\u4f7f\u3063\u3066\u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff1a</li> </ol> <pre><code># Poetry\u304c\u307e\u3060\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# \u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npoetry install\n</code></pre> <ol> <li>pre-commit\u30d5\u30c3\u30af\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"ja/contributing/#devcontainer","title":"DevContainer\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408","text":"<p>VS Code\u3068\u305d\u306e\u62e1\u5f35\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001DevContainer\u3092\u4f7f\u3063\u3066\u958b\u767a\u74b0\u5883\u3092\u7c21\u5358\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3067\u304d\u307e\u3059\uff1a</p> <ol> <li>\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3057\u305f\u5f8c\u3001VS Code\u3067\u958b\u304d\u307e\u3059\uff1a</li> </ol> <pre><code>git clone https://github.com/airulefy/Airulefy.git\ncode Airulefy\n</code></pre> <ol> <li>VS Code\u304c<code>.devcontainer</code>\u30d5\u30a9\u30eb\u30c0\u3092\u691c\u51fa\u3057\u305f\u3089\u3001\u300cReopen in Container\u300d\u3092\u9078\u629e\u3057\u307e\u3059\u3002</li> </ol> <p>\u8a73\u7d30\u306fDevContainer\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/contributing/#_5","title":"\u958b\u767a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","text":""},{"location":"ja/contributing/#_6","title":"\u30d6\u30e9\u30f3\u30c1\u6226\u7565","text":"<ul> <li><code>main</code>: \u30ea\u30ea\u30fc\u30b9\u6e08\u307f\u30b3\u30fc\u30c9</li> <li><code>develop</code>: \u958b\u767a\u4e2d\u306e\u30b3\u30fc\u30c9</li> <li>\u6a5f\u80fd\u30d6\u30e9\u30f3\u30c1: <code>feature/xxxx</code></li> <li>\u30d0\u30b0\u4fee\u6b63\u30d6\u30e9\u30f3\u30c1: <code>fix/xxxx</code></li> </ul>"},{"location":"ja/contributing/#_7","title":"\u65b0\u6a5f\u80fd\u306e\u8ffd\u52a0\u307e\u305f\u306f\u30d0\u30b0\u4fee\u6b63","text":"<ol> <li>\u6700\u65b0\u306e<code>develop</code>\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>git checkout develop\ngit pull\ngit checkout -b feature/your-feature-name\n</code></pre> <ol> <li> <p>\u5909\u66f4\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u307e\u305f\u306f\u66f4\u65b0\u3057\u3001\u5168\u3066\u306e\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff1a</p> </li> </ol> <pre><code>poetry run pytest\n</code></pre> <ol> <li>\u30b3\u30fc\u30c9\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3057\u3001\u30ea\u30f3\u30bf\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>poetry run black .\npoetry run isort .\npoetry run mypy .\n</code></pre> <ol> <li>\u5909\u66f4\u3092\u30b3\u30df\u30c3\u30c8\u3057\u307e\u3059\uff08Conventional Commits\u306e\u5f62\u5f0f\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\uff09\uff1a</li> </ol> <pre><code>git add .\ngit commit -m \"feat: add new feature X\"\n</code></pre> <ol> <li>\u5909\u66f4\u3092\u30d7\u30c3\u30b7\u30e5\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>git push -u origin feature/your-feature-name\n</code></pre> <ol> <li>GitHub\u3067\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3001<code>develop</code>\u30d6\u30e9\u30f3\u30c1\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"ja/contributing/#_8","title":"\u30c6\u30b9\u30c8","text":"<p>Airulefy\u3067\u306f\u3001pytest \u3092\u4f7f\u7528\u3057\u3066\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code># \u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\npoetry run pytest\n\n# \u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8\u3092\u751f\u6210\npoetry run pytest --cov=airulefy\n\n# \u7279\u5b9a\u306e\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\npoetry run pytest tests/test_cli.py\n</code></pre> <p>\u3059\u3079\u3066\u306e\u65b0\u6a5f\u80fd\u306b\u306f\u5bfe\u5fdc\u3059\u308b\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3057\u3001\u65e2\u5b58\u306e\u6a5f\u80fd\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306f\u95a2\u9023\u3059\u308b\u30c6\u30b9\u30c8\u3092\u66f4\u65b0\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/contributing/#_9","title":"\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04","text":""},{"location":"ja/contributing/#python","title":"Python\u30b9\u30bf\u30a4\u30eb\u30ac\u30a4\u30c9","text":"<ul> <li>PEP 8\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044</li> <li>black\u3068isort\u3092\u4f7f\u7528\u3057\u3066\u81ea\u52d5\u30d5\u30a9\u30fc\u30de\u30c3\u30c8</li> <li>mypy\u3092\u4f7f\u7528\u3057\u3066\u578b\u30c1\u30a7\u30c3\u30af</li> </ul>"},{"location":"ja/contributing/#_10","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<ul> <li>\u3059\u3079\u3066\u306e\u516c\u958b\u95a2\u6570\u3001\u30af\u30e9\u30b9\u3001\u30e1\u30bd\u30c3\u30c9\u306b\u306fdocstring\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044</li> <li>Google \u30b9\u30bf\u30a4\u30eb\u306edocstrings\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044</li> </ul>"},{"location":"ja/contributing/#conventional-commits","title":"Conventional Commits","text":"<p>\u30b3\u30df\u30c3\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u306fConventional Commits\u306e\u5f62\u5f0f\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>\u30bf\u30a4\u30d7\u306b\u306f\u4ee5\u4e0b\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li><code>feat</code>: \u65b0\u6a5f\u80fd</li> <li><code>fix</code>: \u30d0\u30b0\u4fee\u6b63</li> <li><code>docs</code>: \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u307f\u306e\u5909\u66f4</li> <li><code>style</code>: \u30b3\u30fc\u30c9\u306e\u610f\u5473\u306b\u5f71\u97ff\u3057\u306a\u3044\u5909\u66f4\uff08\u7a7a\u767d\u3001\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3001\u30bb\u30df\u30b3\u30ed\u30f3\u306e\u6b20\u843d\u306a\u3069\uff09</li> <li><code>refactor</code>: \u30d0\u30b0\u4fee\u6b63\u3067\u3082\u65b0\u6a5f\u80fd\u8ffd\u52a0\u3067\u3082\u306a\u3044\u30b3\u30fc\u30c9\u5909\u66f4</li> <li><code>perf</code>: \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u308b\u30b3\u30fc\u30c9\u5909\u66f4</li> <li><code>test</code>: \u4e0d\u8db3\u3057\u3066\u3044\u308b\u30c6\u30b9\u30c8\u306e\u8ffd\u52a0\u307e\u305f\u306f\u65e2\u5b58\u306e\u30c6\u30b9\u30c8\u306e\u4fee\u6b63</li> <li><code>chore</code>: \u30d3\u30eb\u30c9\u30d7\u30ed\u30bb\u30b9\u307e\u305f\u306f\u88dc\u52a9\u30c4\u30fc\u30eb\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5909\u66f4</li> </ul> <p>\u4f8b\uff1a</p> <pre><code>feat: \u76e3\u8996\u30e2\u30fc\u30c9\u306b\u81ea\u52d5\u518d\u63a5\u7d9a\u6a5f\u80fd\u3092\u8ffd\u52a0\n\n\u63a5\u7d9a\u304c\u5207\u308c\u305f\u5834\u5408\u300130\u79d2\u3054\u3068\u306b\u518d\u63a5\u7d9a\u3092\u8a66\u307f\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3053\u308c\u306b\u3088\u308a\u9577\u6642\u9593\u306e\u904b\u7528\u4e2d\u306e\u4fe1\u983c\u6027\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\n\nFixes #123\n</code></pre>"},{"location":"ja/contributing/#_11","title":"\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8","text":"<p>\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\u3059\u308b\u524d\u306b\uff1a</p> <ol> <li>\u30b3\u30fc\u30c9\u304c\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d</li> <li>\u30b3\u30fc\u30c9\u304c\u9069\u5207\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d</li> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u66f4\u65b0</li> <li>\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5909\u66f4\u5185\u5bb9\u306e\u8a73\u7d30\u306a\u8aac\u660e\u3092\u542b\u3081\u308b</li> </ol>"},{"location":"ja/contributing/#_12","title":"\u30ea\u30ea\u30fc\u30b9\u30d7\u30ed\u30bb\u30b9","text":"<p>Airulefy\u306e\u30ea\u30ea\u30fc\u30b9\u306f\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u884c\u308f\u308c\u307e\u3059\uff1a</p> <ol> <li><code>develop</code>\u30d6\u30e9\u30f3\u30c1\u3067\u5168\u3066\u306e\u30c6\u30b9\u30c8\u304c\u6210\u529f\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d</li> <li>\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u3092\u66f4\u65b0\uff08<code>pyproject.toml</code>\uff09</li> <li>CHANGELOG\u306e\u66f4\u65b0</li> <li><code>main</code>\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8</li> <li>\u30ea\u30ea\u30fc\u30b9\u30bf\u30b0\u306e\u4f5c\u6210</li> <li>PyPI\u3078\u306e\u516c\u958b</li> </ol>"},{"location":"ja/contributing/#_13","title":"\u8cea\u554f\u304c\u3042\u308b\u5834\u5408","text":"<p>\u8cea\u554f\u3084\u61f8\u5ff5\u304c\u3042\u308b\u5834\u5408\u306f\u3001GitHub\u306eIssue\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u65b0\u3057\u3044Issue\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u79c1\u305f\u3061\u306f\u3067\u304d\u308b\u3060\u3051\u65e9\u304f\u5bfe\u5fdc\u3057\u307e\u3059\u3002</p> <p>\u3054\u8ca2\u732e\u3092\u304a\u5f85\u3061\u3057\u3066\u3044\u307e\u3059\uff01</p>"},{"location":"ja/devcontainer/","title":"DevContainer","text":"<p>Airulefy\u306f\u3001Visual Studio Code\u306eDevContainer\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304a\u308a\u3001\u958b\u767a\u74b0\u5883\u3092\u7c21\u5358\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 \u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001DevContainer\u306e\u8a2d\u5b9a\u3068\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/devcontainer/#devcontainer_1","title":"DevContainer\u3068\u306f","text":"<p>DevContainer\u306fVS Code\u306e\u6a5f\u80fd\u3067\u3001Docker\u30b3\u30f3\u30c6\u30ca\u5185\u306b\u5b8c\u5168\u306a\u958b\u767a\u74b0\u5883\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u3069\u306e\u958b\u767a\u8005\u3082\u540c\u3058\u8a2d\u5b9a\u3001\u30c4\u30fc\u30eb\u3001\u62e1\u5f35\u6a5f\u80fd\u3092\u6301\u3064\u4e00\u8cab\u3057\u305f\u74b0\u5883\u3067\u4f5c\u696d\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"ja/devcontainer/#airulefy","title":"Airulefy\u306e\u958b\u767a\u74b0\u5883","text":"<p>Airulefy\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u4ee5\u4e0b\u306e\u7279\u5fb4\u3092\u6301\u3064DevContainer\u8a2d\u5b9a\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff1a</p> <ul> <li>Python 3.11\u74b0\u5883</li> <li>Poetry\u306b\u3088\u308bPython\u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406</li> <li>\u81ea\u52d5\u30c6\u30b9\u30c8\u5b9f\u884c</li> <li>\u30b3\u30fc\u30c9\u54c1\u8cea\u30c4\u30fc\u30eb\uff08black\u3001isort\u3001mypy\uff09\u306e\u4e8b\u524d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</li> <li>VS Code Python\u62e1\u5f35\u6a5f\u80fd\u306e\u81ea\u52d5\u8a2d\u5b9a</li> </ul>"},{"location":"ja/devcontainer/#devcontainerjson","title":"devcontainer.json","text":"<p><code>.devcontainer/devcontainer.json</code>\u30d5\u30a1\u30a4\u30eb\u306f\u3001DevContainer\u306e\u4e3b\u306a\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002 Airulefy\u3067\u4f7f\u7528\u3055\u308c\u308b\u8a2d\u5b9a\u306e\u4f8b\uff1a</p> <pre><code>{\n    \"name\": \"Airulefy Development\",\n    \"dockerFile\": \"Dockerfile\",\n    \"settings\": {\n        \"python.defaultInterpreterPath\": \"/usr/local/bin/python\",\n        \"python.linting.enabled\": true,\n        \"python.linting.pylintEnabled\": false,\n        \"python.linting.mypyEnabled\": true,\n        \"python.formatting.provider\": \"black\",\n        \"editor.formatOnSave\": true,\n        \"editor.codeActionsOnSave\": {\n            \"source.organizeImports\": true\n        }\n    },\n    \"extensions\": [\n        \"ms-python.python\",\n        \"ms-python.vscode-pylance\",\n        \"njpwerner.autodocstring\"\n    ],\n    \"postCreateCommand\": \"poetry install &amp;&amp; pre-commit install\",\n    \"remoteUser\": \"vscode\"\n}\n</code></pre>"},{"location":"ja/devcontainer/#dockerfile","title":"Dockerfile","text":"<p><code>.devcontainer/Dockerfile</code>\u306fDevContainer\u306e\u57fa\u672c\u30a4\u30e1\u30fc\u30b8\u3068\u8ffd\u52a0\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u624b\u9806\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff1a</p> <pre><code>FROM mcr.microsoft.com/devcontainers/python:3.11\n\n# Poetry\u74b0\u5883\u5909\u6570\nENV POETRY_NO_INTERACTION=1 \\\n    POETRY_VIRTUALENVS_IN_PROJECT=1 \\\n    POETRY_VIRTUALENVS_CREATE=1 \\\n    POETRY_CACHE_DIR=/tmp/poetry_cache\n\n# Poetry\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nRUN curl -sSL https://install.python-poetry.org | python3 - &amp;&amp; \\\n    poetry --version\n\n# \u5fc5\u8981\u306a\u30b7\u30b9\u30c6\u30e0\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n    make \\\n    &amp;&amp; apt-get clean \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# \u30ef\u30fc\u30ad\u30f3\u30b0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8a2d\u5b9a\nWORKDIR /workspaces/Airulefy\n</code></pre>"},{"location":"ja/devcontainer/#_1","title":"\u81ea\u52d5\u30c6\u30b9\u30c8\u5b9f\u884c","text":"<p>Airulefy\u306e\u958b\u767a\u74b0\u5883\u3067\u306f\u3001\u80cc\u666f\u3067\u30c6\u30b9\u30c8\u3092\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306f\u3001<code>.vscode/settings.json</code>\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <pre><code>{\n    \"python.testing.pytestEnabled\": true,\n    \"python.testing.unittestEnabled\": false,\n    \"python.testing.nosetestsEnabled\": false,\n    \"python.testing.pytestArgs\": [\n        \"tests\"\n    ],\n    \"python.testing.autoTestDiscoverOnSaveEnabled\": true\n}\n</code></pre> <p>\u3053\u308c\u306b\u3088\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3073\u306b\u95a2\u9023\u3059\u308b\u30c6\u30b9\u30c8\u304c\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"ja/devcontainer/#_2","title":"\u958b\u767a\u30b3\u30f3\u30c6\u30ca\u306e\u4f7f\u7528\u65b9\u6cd5","text":"<ol> <li> <p>Visual Studio Code\u3068Remote - Containers\u62e1\u5f35\u6a5f\u80fd\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</p> </li> <li> <p>Airulefy\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\uff1a    <pre><code>git clone https://github.com/airulefy/Airulefy.git\ncd Airulefy\n</code></pre></p> </li> <li> <p>VS Code\u3067\u30d5\u30a9\u30eb\u30c0\u3092\u958b\u304f\uff1a    <pre><code>code .\n</code></pre></p> </li> <li> <p>VS Code\u304c<code>.devcontainer</code>\u30d5\u30a9\u30eb\u30c0\u3092\u691c\u51fa\u3057\u3001\u901a\u77e5\u3092\u8868\u793a\u3059\u308b\u306e\u3067\u300cReopen in Container\u300d\u3092\u9078\u629e</p> </li> <li> <p>\u30b3\u30f3\u30c6\u30ca\u306e\u30d3\u30eb\u30c9\u3068\u8a2d\u5b9a\u304c\u5b8c\u4e86\u3059\u308b\u306e\u3092\u5f85\u3061\u307e\u3059\uff08\u521d\u56de\u306f\u6570\u5206\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff09</p> </li> <li> <p>\u3053\u308c\u3067\u3001\u5b8c\u5168\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3055\u308c\u305f\u958b\u767a\u74b0\u5883\u3067Airulefy\u306e\u958b\u767a\u3092\u958b\u59cb\u3067\u304d\u307e\u3059\uff01</p> </li> </ol>"},{"location":"ja/devcontainer/#_3","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"ja/devcontainer/#_4","title":"\u30b3\u30f3\u30c6\u30ca\u306e\u518d\u30d3\u30eb\u30c9","text":"<p>\u4f9d\u5b58\u95a2\u4fc2\u304c\u5909\u308f\u3063\u305f\u5834\u5408\u306a\u3069\u3001\u30b3\u30f3\u30c6\u30ca\u3092\u518d\u30d3\u30eb\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\uff1a</p> <ol> <li>VS Code\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u3092\u958b\u304f\uff08<code>Ctrl+Shift+P</code>\u307e\u305f\u306f<code>Cmd+Shift+P</code>\uff09</li> <li>\u300cRemote-Containers: Rebuild Container\u300d\u3092\u9078\u629e</li> </ol>"},{"location":"ja/devcontainer/#_5","title":"\u30dd\u30fc\u30c8\u306e\u8ee2\u9001","text":"<p>\u30b3\u30f3\u30c6\u30ca\u5185\u3067\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u30b5\u30fc\u30d3\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f\u3001\u30dd\u30fc\u30c8\u8ee2\u9001\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 VS Code\u306f\u81ea\u52d5\u7684\u306b\u591a\u304f\u306e\u30dd\u30fc\u30c8\u3092\u691c\u51fa\u3057\u307e\u3059\u304c\u3001\u624b\u52d5\u3067\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff1a</p> <ol> <li>VS Code\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u3092\u958b\u304f</li> <li>\u300cRemote-Containers: Forward Port from Container\u300d\u3092\u9078\u629e</li> <li>\u8ee2\u9001\u3057\u305f\u3044\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u5165\u529b</li> </ol>"},{"location":"ja/how_it_works/","title":"\u52d5\u4f5c\u539f\u7406","text":"<p>Airulefy\u306e\u5185\u90e8\u52d5\u4f5c\u3068\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c4\u30fc\u30eb\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3084 \u30d0\u30b0\u4fee\u6b63\u3001\u6a5f\u80fd\u8ffd\u52a0\u306b\u95a2\u5fc3\u306e\u3042\u308b\u958b\u767a\u8005\u306b\u3068\u3063\u3066\u6709\u7528\u306a\u60c5\u5831\u3067\u3059\u3002</p>"},{"location":"ja/how_it_works/#_2","title":"\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u6982\u8981","text":"<p>Airulefy\u306f\u3001\u5358\u4e00\u306e\u60c5\u5831\u6e90\u304b\u3089\u8907\u6570\u306eAI\u30c4\u30fc\u30eb\u7528\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>flowchart TB\n    subgraph Input\n        MD[\".ai/ Markdown\u30d5\u30a1\u30a4\u30eb\"]\n        Conf[\".ai-rules.yml \u8a2d\u5b9a\"]\n    end\n\n    subgraph Core\n        Reader[\"Markdown\u30ea\u30fc\u30c0\u30fc\"]\n        Config[\"\u8a2d\u5b9a\u30ed\u30fc\u30c9\"]\n\n        subgraph Adapters\n            Cursor[\"Cursor\u30a2\u30c0\u30d7\u30bf\u30fc\"]\n            Cline[\"Cline\u30a2\u30c0\u30d7\u30bf\u30fc\"]\n            Copilot[\"Copilot\u30a2\u30c0\u30d7\u30bf\u30fc\"]\n            Devin[\"Devin\u30a2\u30c0\u30d7\u30bf\u30fc\"]\n        end\n    end\n\n    subgraph Output\n        CursorOut[\".cursor/rules/*.mdc\"]\n        ClineOut[\".cline-rules\"]\n        CopilotOut[\".github/copilot-instructions.md\"]\n        DevinOut[\"devin-guidelines.md\"]\n    end\n\n    MD --&gt; Reader\n    Conf --&gt; Config\n    Config --&gt; Reader\n\n    Reader --&gt; Cursor\n    Reader --&gt; Cline\n    Reader --&gt; Copilot\n    Reader --&gt; Devin\n\n    Cursor --&gt; CursorOut\n    Cline --&gt; ClineOut\n    Copilot --&gt; CopilotOut\n    Devin --&gt; DevinOut\n\n    Config --&gt; Adapters</code></pre>"},{"location":"ja/how_it_works/#_3","title":"\u4e3b\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8","text":""},{"location":"ja/how_it_works/#1","title":"1. \u8a2d\u5b9a\u7ba1\u7406","text":"<p>Airulefy\u306f\u3001<code>.ai-rules.yml</code>\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u307f\u3001Pydantic\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u691c\u8a3c\u3068 \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u63d0\u4f9b\u3092\u884c\u3044\u307e\u3059\u3002</p> <p>\u4e3b\u306a\u8cac\u4efb: - \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u89e3\u6790 - \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u63d0\u4f9b - \u8a2d\u5b9a\u306e\u691c\u8a3c</p>"},{"location":"ja/how_it_works/#2-markdown","title":"2. Markdown\u30d5\u30a1\u30a4\u30eb\u51e6\u7406","text":"<p><code>.ai/</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\uff08\u307e\u305f\u306f\u8a2d\u5b9a\u3055\u308c\u305f\u5165\u529b\u30d1\u30b9\uff09\u304b\u3089\u5168\u3066\u306eMarkdown\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002</p> <p>\u4e3b\u306a\u8cac\u4efb: - Markdown\u30d5\u30a1\u30a4\u30eb\u306e\u691c\u51fa - \u30d5\u30a1\u30a4\u30eb\u5185\u5bb9\u306e\u8aad\u307f\u8fbc\u307f - \u5fc5\u8981\u306b\u5fdc\u3058\u305f\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u62bd\u51fa</p>"},{"location":"ja/how_it_works/#3","title":"3. \u30c4\u30fc\u30eb\u56fa\u6709\u306e\u30a2\u30c0\u30d7\u30bf\u30fc","text":"<p>\u5404AI\u30c4\u30fc\u30eb\u306b\u306f\u5c02\u7528\u306e\u30a2\u30c0\u30d7\u30bf\u30fc\u304c\u3042\u308a\u3001Markdown\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u305d\u306e\u30c4\u30fc\u30eb\u306b\u9069\u3057\u305f\u5f62\u5f0f\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> <p>\u4e3b\u306a\u8cac\u4efb: - \u30c4\u30fc\u30eb\u56fa\u6709\u306e\u5f62\u5f0f\u3078\u306e\u5909\u63db - \u5fc5\u8981\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u3084\u30d8\u30c3\u30c0\u30fc\u306e\u8ffd\u52a0 - \u51fa\u529b\u5148\u306e\u6c7a\u5b9a</p>"},{"location":"ja/how_it_works/#_4","title":"\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30a2\u30c0\u30d7\u30bf\u30fc","text":"<ul> <li>Cursor: <code>.mdc</code>\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u3092<code>.cursor/rules/</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u751f\u6210</li> <li>Cline: \u6a19\u6e96\u7684\u306aMarkdown\u3092<code>.cline-rules</code>\u30d5\u30a1\u30a4\u30eb\u306b\u751f\u6210</li> <li>Copilot: GitHub Copilot\u7528\u306e\u6307\u793a\u3092<code>.github/copilot-instructions.md</code>\u306b\u751f\u6210</li> <li>Devin: Devin\u7528\u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u3092<code>devin-guidelines.md</code>\u306b\u751f\u6210</li> </ul>"},{"location":"ja/how_it_works/#4","title":"4. \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u64cd\u4f5c","text":"<p>\u8a2d\u5b9a\u3055\u308c\u305f\u30e2\u30fc\u30c9\uff08\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u307e\u305f\u306f\u30b3\u30d4\u30fc\uff09\u306b\u5f93\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <p>\u4e3b\u306a\u8cac\u4efb: - \u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210 - \u9069\u5207\u306a\u30e2\u30fc\u30c9\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u751f\u6210\uff08\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u307e\u305f\u306f\u30b3\u30d4\u30fc\uff09 - \u65e2\u5b58\u30d5\u30a1\u30a4\u30eb\u306e\u51e6\u7406</p>"},{"location":"ja/how_it_works/#5-watch","title":"5. \u5909\u66f4\u76e3\u8996 (watch\u30e2\u30fc\u30c9)","text":"<p><code>airulefy watch</code>\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5909\u66f4\u3092\u76e3\u8996\u3057\u3001\u5909\u66f4\u304c\u3042\u308c\u3070 \u81ea\u52d5\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u751f\u6210\u3057\u307e\u3059\u3002</p> <p>\u4e3b\u306a\u8cac\u4efb: - \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8\u306e\u76e3\u8996 - \u5909\u66f4\u691c\u51fa\u6642\u306e\u518d\u751f\u6210\u30c8\u30ea\u30ac\u30fc</p>"},{"location":"ja/how_it_works/#_5","title":"\u51e6\u7406\u30d5\u30ed\u30fc","text":"<ol> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\uff08\u5b58\u5728\u3059\u308b\u5834\u5408\uff09</li> <li>\u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u306eMarkdown\u30d5\u30a1\u30a4\u30eb\u691c\u51fa</li> <li>\u5404\u30a2\u30c0\u30d7\u30bf\u30fc\u3067\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u51e6\u7406</li> <li>\u9069\u5207\u306a\u30e2\u30fc\u30c9\uff08\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u307e\u305f\u306f\u30b3\u30d4\u30fc\uff09\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u751f\u6210</li> <li>\u7d50\u679c\u306e\u5831\u544a</li> </ol> <pre><code>sequenceDiagram\n    participant User as \u30e6\u30fc\u30b6\u30fc\n    participant CLI as CLI\n    participant Config as \u8a2d\u5b9a\u30ed\u30fc\u30c0\u30fc\n    participant FSUtils as FS\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\n    participant Adapters as \u30a2\u30c0\u30d7\u30bf\u30fc\n    participant FS as \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\n\n    User-&gt;&gt;CLI: airulefy generate\n    CLI-&gt;&gt;Config: \u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u3080\n    Config-&gt;&gt;FS: .ai-rules.yml\u3092\u691c\u7d22\n    FS--&gt;&gt;Config: \u8a2d\u5b9a\u5185\u5bb9\n    CLI-&gt;&gt;FSUtils: Markdown\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\n    FSUtils-&gt;&gt;FS: .ai/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30b9\u30ad\u30e3\u30f3\n    FS--&gt;&gt;FSUtils: Markdown\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\n    FSUtils--&gt;&gt;CLI: Markdown\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\n\n    loop \u5404\u30c4\u30fc\u30eb\u306e\u30a2\u30c0\u30d7\u30bf\u30fc\n        CLI-&gt;&gt;Adapters: Markdown\u3092\u51e6\u7406\n        Adapters-&gt;&gt;FS: \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210/\u30ea\u30f3\u30af\n        FS--&gt;&gt;Adapters: \u7d50\u679c\n        Adapters--&gt;&gt;CLI: \u51e6\u7406\u7d50\u679c\n    end\n\n    CLI--&gt;&gt;User: \u7d50\u679c\u3092\u8868\u793a</code></pre>"},{"location":"ja/how_it_works/#_6","title":"\u62e1\u5f35\u6027","text":"<p>Airulefy\u306f\u65b0\u3057\u3044AI\u30c4\u30fc\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306b\u7c21\u5358\u306b\u62e1\u5f35\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u65b0\u3057\u3044\u30c4\u30fc\u30eb\u3092 \u8ffd\u52a0\u3059\u308b\u306b\u306f\u3001\u57fa\u672c\u7684\u306a\u30a2\u30c0\u30d7\u30bf\u30fc\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3001\u8a2d\u5b9a\u306b\u65b0\u3057\u3044\u30c4\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u3059\u3002</p>"},{"location":"ja/installation/","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5","text":"<p>Airulefy\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u65b9\u6cd5\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\u81ea\u5206\u306e\u74b0\u5883\u3084\u597d\u307f\u306b\u5408\u3063\u305f\u65b9\u6cd5\u3092\u9078\u3093\u3067\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/installation/#_2","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>Python 3.11\u4ee5\u4e0a</li> <li>pip \u307e\u305f\u306f Poetry\uff08\u63a8\u5968\uff09</li> </ul>"},{"location":"ja/installation/#poetry","title":"Poetry\u3092\u4f7f\u7528\u3057\u305f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff08\u63a8\u5968\uff09","text":"<p>Poetry\u306f\u3001\u4f9d\u5b58\u95a2\u4fc2\u7ba1\u7406\u3068\u74b0\u5883\u306e\u5206\u96e2\u3092\u5bb9\u6613\u306b\u3059\u308b\u73fe\u4ee3\u7684\u306aPython\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3067\u3059\u3002</p> <pre><code># Poetry\u304c\u307e\u3060\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Airulefy\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npoetry add airulefy\n</code></pre> <p>\u65e2\u5b58\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u958b\u767a\u4f9d\u5b58\u95a2\u4fc2\u3068\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408\uff1a</p> <pre><code>poetry add --dev airulefy\n</code></pre>"},{"location":"ja/installation/#pip","title":"pip\u3092\u4f7f\u7528\u3057\u305f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u6a19\u6e96\u7684\u306aPython\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f7f\u7528\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff1a</p> <pre><code>pip install airulefy\n</code></pre> <p>\u7279\u5b9a\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\uff1a</p> <pre><code>pip install airulefy==0.1.0\n</code></pre>"},{"location":"ja/installation/#devcontainer","title":"DevContainer\u3092\u4f7f\u7528\u3057\u305f\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","text":"<p>VSCode\u306eDevContainer\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u7c21\u5358\u306b\u74b0\u5883\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3067\u304d\u307e\u3059\uff1a</p> <ol> <li><code>.devcontainer/devcontainer.json</code>\u30d5\u30a1\u30a4\u30eb\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a</li> </ol> <pre><code>{\n  \"name\": \"Python Development\",\n  \"image\": \"mcr.microsoft.com/devcontainers/python:3.11\",\n  \"postCreateCommand\": \"pip install airulefy\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"ms-python.python\"\n      ]\n    }\n  }\n}\n</code></pre> <ol> <li>DevContainer\u3092\u518d\u8d77\u52d5\u3059\u308b\u3068\u3001Airulefy\u304c\u81ea\u52d5\u7684\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002</li> </ol>"},{"location":"ja/installation/#github-codespaces","title":"GitHub Codespaces\u3067\u306e\u4f7f\u7528","text":"<p>GitHub Codespaces\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\uff1a</p> <ol> <li>\u30ea\u30dd\u30b8\u30c8\u30ea\u306bDevContainer\u8a2d\u5b9a\u3092\u542b\u3081\u307e\u3059\uff08\u4e0a\u8a18\u53c2\u7167\uff09</li> <li>Codespaces\u3092\u8d77\u52d5\u3059\u308b\u3068\u3001Airulefy\u304c\u81ea\u52d5\u7684\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059</li> <li>\u3042\u308b\u3044\u306f\u3001Codespaces\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u76f4\u63a5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff1a</li> </ol> <pre><code>pip install airulefy\n</code></pre>"},{"location":"ja/quickstart/","title":"\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8","text":"<p>Airulefy\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u30925\u5206\u3067\u7fd2\u5f97\u3067\u304d\u308b\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9\u3067\u3059\u3002</p>"},{"location":"ja/quickstart/#1","title":"1. \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u6e96\u5099","text":"<p>\u307e\u305a\u3001AI\u30eb\u30fc\u30eb\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code># \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\nmkdir -p .ai\n</code></pre>"},{"location":"ja/quickstart/#2-ai","title":"2. AI\u30eb\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","text":"<p><code>.ai</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bMarkdown\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>cat &gt; .ai/main.md &lt;&lt; EOL\n# \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30eb\n\n\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\uff1a\n\n## \u30b3\u30fc\u30c9\u898f\u7d04\n- \u30a4\u30f3\u30c7\u30f3\u30c8\u306b\u306f\u30b9\u30da\u30fc\u30b9\u3092\u4f7f\u7528\uff08\u30bf\u30d6\u3067\u306f\u306a\u304f\uff09\n- \u5909\u6570\u540d\u306f\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3067\n- \u95a2\u6570\u540d\u306f\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u3067\n- \u30b3\u30e1\u30f3\u30c8\u306f\u65e5\u672c\u8a9e\u3067\u8a18\u8ff0\n\n## \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n- \u4f8b\u5916\u306f\u9069\u5207\u306b\u6355\u6349\u3059\u308b\u3053\u3068\n- \u4f8b\u5916\u306f\u30ed\u30b0\u306b\u8a18\u9332\u3059\u308b\u3053\u3068\nEOL\n</code></pre> <p>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8ffd\u52a0\u306e\u30eb\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>cat &gt; .ai/architecture.md &lt;&lt; EOL\n# \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\n\n## \u30ec\u30a4\u30e4\u30fc\u30c9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\n\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u4ee5\u4e0b\u306e\u30ec\u30a4\u30e4\u30fc\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\uff1a\n- \u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u5c64\n- \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u5c64\n- \u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u5c64\nEOL\n</code></pre>"},{"location":"ja/quickstart/#3","title":"3. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09","text":"<p>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001<code>.ai-rules.yml</code>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>cat &gt; .ai-rules.yml &lt;&lt; EOL\ndefault_mode: symlink\ntools:\n  cursor:\n    output: \".cursor/rules/core.mdc\"\n  cline:\n    mode: copy\n  copilot: {}\n  devin:\n    output: \"devin-guidelines.md\"\nEOL\n</code></pre>"},{"location":"ja/quickstart/#4-ai","title":"4. AI\u30eb\u30fc\u30eb\u306e\u751f\u6210","text":"<p>\u8a2d\u5b9a\u3057\u305fAI\u30eb\u30fc\u30eb\u3092\u5404\u30c4\u30fc\u30eb\u7528\u306b\u751f\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>airulefy generate\n</code></pre> <p>\u51fa\u529b\u4f8b\uff1a</p> <pre><code>Successfully generated rule files:\n- .cursor/rules/core.mdc [symlink]\n- .cline-rules [copy]\n- .github/copilot-instructions.md [symlink]\n- devin-guidelines.md [symlink]\n</code></pre> <p>\u8a73\u7d30\u51fa\u529b\u3092\u8868\u793a\u3059\u308b\u306b\u306f <code>-v</code> \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>airulefy generate -v\n</code></pre>"},{"location":"ja/quickstart/#5","title":"5. \u5909\u66f4\u76e3\u8996\u30e2\u30fc\u30c9\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09","text":"<p><code>.ai</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5909\u66f4\u3092\u76e3\u8996\u3057\u3001\u5909\u66f4\u304c\u3042\u308c\u3070\u81ea\u52d5\u7684\u306b\u30eb\u30fc\u30eb\u3092\u518d\u751f\u6210\u3059\u308b\u30e2\u30fc\u30c9\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>airulefy watch\n</code></pre> <p>\u3053\u308c\u306b\u3088\u308a\u3001\u30eb\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3059\u308b\u305f\u3073\u306b\u3001\u5404AI\u30c4\u30fc\u30eb\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u81ea\u52d5\u7684\u306b\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"ja/quickstart/#6","title":"6. \u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30c4\u30fc\u30eb\u306e\u4e00\u89a7\u8868\u793a","text":"<p>\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308bAI\u30c4\u30fc\u30eb\u3068\u305d\u306e\u8a2d\u5b9a\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\uff1a</p> <pre><code>airulefy list-tools\n</code></pre>"},{"location":"ja/quickstart/#7","title":"7. \u8a2d\u5b9a\u306e\u691c\u8a3c","text":"<p>\u73fe\u5728\u306e\u8a2d\u5b9a\u3068\u30eb\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u8a3c\u3059\u308b\u306b\u306f\uff1a</p> <pre><code>airulefy validate\n</code></pre>"}]}